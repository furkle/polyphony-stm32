
polyphony.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08008508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a10  20000074  0800857c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a84  0800857c  00020a84  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000211b7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038a6  00000000  00000000  00041259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012f0  00000000  00000000  00044b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011d8  00000000  00000000  00045df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000322f2  00000000  00000000  00046fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001730a  00000000  00000000  000792ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00142eed  00000000  00000000  000905c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d34b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055c8  00000000  00000000  001d3504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	20000074 	.word	0x20000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008444 	.word	0x08008444

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	20000078 	.word	0x20000078
 80002ec:	08008444 	.word	0x08008444

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <ring_buffer_u8_init>:
/////////////////////////////
//methods for uint8_t FIFO.
/////////////////////////////

buffer_status_t ring_buffer_u8_init(ring_buffer_u8_t *rbuf, uint16_t buflen)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	uint32_t i;

	ring_buffer_u8_free(rbuf);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f826 	bl	8000646 <ring_buffer_u8_free>

	rbuf->buffer = (uint8_t *)malloc(buflen * sizeof(uint8_t));
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 fafb 	bl	8007bf8 <malloc>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]

	if (rbuf->buffer == NULL) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ring_buffer_u8_init+0x2e>
		return BUFFER_FAILURE;
 8000612:	2300      	movs	r3, #0
 8000614:	e013      	b.n	800063e <ring_buffer_u8_init+0x56>
	}

	for (i=0; i < buflen; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e008      	b.n	800062e <ring_buffer_u8_init+0x46>
		rbuf->buffer[i] = 0;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	for (i=0; i < buflen; i++) {
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	429a      	cmp	r2, r3
 8000634:	d3f2      	bcc.n	800061c <ring_buffer_u8_init+0x34>
	}

	rbuf->length = buflen;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	887a      	ldrh	r2, [r7, #2]
 800063a:	809a      	strh	r2, [r3, #4]

	return BUFFER_SUCCESS;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <ring_buffer_u8_free>:

buffer_status_t ring_buffer_u8_free(ring_buffer_u8_t *rbuf)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	if (rbuf->buffer != NULL) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <ring_buffer_u8_free+0x1a>
		free(rbuf->buffer);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fad4 	bl	8007c08 <free>
	}

	rbuf->idx_front = rbuf->idx_rear = 0;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	805a      	strh	r2, [r3, #2]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	885a      	ldrh	r2, [r3, #2]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	801a      	strh	r2, [r3, #0]
	rbuf->length = 0;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	809a      	strh	r2, [r3, #4]

	return BUFFER_SUCCESS;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <ring_buffer_u8_enqueue>:

buffer_status_t ring_buffer_u8_enqueue(ring_buffer_u8_t *rbuf, uint8_t *inputc)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
	if (((rbuf->idx_front + 1) & (rbuf->length - 1)) == rbuf->idx_rear) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	889b      	ldrh	r3, [r3, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	4013      	ands	r3, r2
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	8852      	ldrh	r2, [r2, #2]
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <ring_buffer_u8_enqueue+0x24>
		// buffer overrun error occurs.
		return BUFFER_FAILURE;
 800069e:	2300      	movs	r3, #0
 80006a0:	e01b      	b.n	80006da <ring_buffer_u8_enqueue+0x5c>
	}

	rbuf->buffer[rbuf->idx_front] = *inputc;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	8812      	ldrh	r2, [r2, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
	rbuf->idx_front++;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	801a      	strh	r2, [r3, #0]
	rbuf->idx_front &= (rbuf->length - 1);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	889b      	ldrh	r3, [r3, #4]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4013      	ands	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	801a      	strh	r2, [r3, #0]

	return BUFFER_SUCCESS;
 80006d8:	2301      	movs	r3, #1
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <ring_buffer_u8_dequeue>:

buffer_status_t ring_buffer_u8_dequeue(ring_buffer_u8_t *rbuf, uint8_t *ret)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
	if (rbuf->idx_front == rbuf->idx_rear) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	881a      	ldrh	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	885b      	ldrh	r3, [r3, #2]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d101      	bne.n	8000700 <ring_buffer_u8_dequeue+0x1a>
		// if buffer underrun error occurs.
		return BUFFER_FAILURE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e01b      	b.n	8000738 <ring_buffer_u8_dequeue+0x52>
	}

	*ret = (rbuf->buffer[rbuf->idx_rear]);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	8852      	ldrh	r2, [r2, #2]
 8000708:	4413      	add	r3, r2
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	701a      	strb	r2, [r3, #0]
	rbuf->idx_rear++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	885b      	ldrh	r3, [r3, #2]
 8000714:	3301      	adds	r3, #1
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	805a      	strh	r2, [r3, #2]
	rbuf->idx_rear &= (rbuf->length -1);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	885b      	ldrh	r3, [r3, #2]
 8000720:	b21a      	sxth	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	b29b      	uxth	r3, r3
 800072a:	b21b      	sxth	r3, r3
 800072c:	4013      	ands	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	b29a      	uxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	805a      	strh	r2, [r3, #2]
	return BUFFER_SUCCESS;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <user_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void user_init()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	outbuf.idx = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <user_init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	outbuf.started_flag = 0;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <user_init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
	outbuf.err_distance = 0;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <user_init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804

	// MIDI Initializations.
	if (midi_init() == FUNC_ERROR) {
 8000760:	f000 fc30 	bl	8000fc4 <midi_init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d100      	bne.n	800076c <user_init+0x28>
		while(1);
 800076a:	e7fe      	b.n	800076a <user_init+0x26>
	}

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <user_init+0x58>)
 8000770:	f001 fb27 	bl	8001dc2 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000774:	2110      	movs	r1, #16
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <user_init+0x58>)
 8000778:	f001 fb23 	bl	8001dc2 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 800077c:	2100      	movs	r1, #0
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <user_init+0x5c>)
 8000780:	f001 fb1f 	bl	8001dc2 <HAL_DAC_Start>

	// start MIDI message reception with interrupt.
	HAL_UART_Receive_IT(&huart4, &midi_received_buf, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	4907      	ldr	r1, [pc, #28]	; (80007a4 <user_init+0x60>)
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <user_init+0x64>)
 800078a:	f005 fa01 	bl	8005b90 <HAL_UART_Receive_IT>

	// Start the timer.
	HAL_TIM_Base_Start_IT(&htim16);
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <user_init+0x68>)
 8000790:	f004 ff3e 	bl	8005610 <HAL_TIM_Base_Start_IT>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001fc 	.word	0x200001fc
 800079c:	200000b4 	.word	0x200000b4
 80007a0:	200000a0 	.word	0x200000a0
 80007a4:	20000a02 	.word	0x20000a02
 80007a8:	2000016c 	.word	0x2000016c
 80007ac:	20000a04 	.word	0x20000a04

080007b0 <update_dac_values>:

void update_dac_values() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t cv_out;
	uint8_t gate_out;
	for (i = 0; i < MAX_VOICES; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e06f      	b.n	800089c <update_dac_values+0xec>
		cv_out = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
		gate_out = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71fb      	strb	r3, [r7, #7]

		cv_out = (uint32_t)((voices[i].note_number * 0.0833333333 * VOLTAGE_SCALE_FACTOR) / (3.3 / 4096));
 80007c4:	7bfa      	ldrb	r2, [r7, #15]
 80007c6:	493e      	ldr	r1, [pc, #248]	; (80008c0 <update_dac_values+0x110>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	ee07 3a90 	vmov	s15, r3
 80007d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007dc:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80008b0 <update_dac_values+0x100>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80007e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007ec:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80008b8 <update_dac_values+0x108>
 80007f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007f8:	ee17 3a90 	vmov	r3, s15
 80007fc:	60bb      	str	r3, [r7, #8]
		if (cv_out >= DAC_OUTPUT_MAX) {
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000804:	4293      	cmp	r3, r2
 8000806:	d902      	bls.n	800080e <update_dac_values+0x5e>
			cv_out = (uint32_t)DAC_OUTPUT_MAX;
 8000808:	f640 73ff 	movw	r3, #4095	; 0xfff
 800080c:	60bb      	str	r3, [r7, #8]
		}

		if (voices[i].active) {
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	492b      	ldr	r1, [pc, #172]	; (80008c0 <update_dac_values+0x110>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	440b      	add	r3, r1
 800081c:	3301      	adds	r3, #1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <update_dac_values+0x78>
			gate_out = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
		}

		// Send CV to relevant DAC.
		if (i == 0) {
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d106      	bne.n	800083c <update_dac_values+0x8c>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cv_out);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	4823      	ldr	r0, [pc, #140]	; (80008c4 <update_dac_values+0x114>)
 8000836:	f001 fb16 	bl	8001e66 <HAL_DAC_SetValue>
 800083a:	e00f      	b.n	800085c <update_dac_values+0xac>
		} else if (i == 1) {
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d106      	bne.n	8000850 <update_dac_values+0xa0>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, cv_out);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2200      	movs	r2, #0
 8000846:	2110      	movs	r1, #16
 8000848:	481e      	ldr	r0, [pc, #120]	; (80008c4 <update_dac_values+0x114>)
 800084a:	f001 fb0c 	bl	8001e66 <HAL_DAC_SetValue>
 800084e:	e005      	b.n	800085c <update_dac_values+0xac>
		} else {
			HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, cv_out);
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <update_dac_values+0x118>)
 8000858:	f001 fb05 	bl	8001e66 <HAL_DAC_SetValue>
		}

		// Send Gate to relevant GPIO.
		if (i == 0) {
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d107      	bne.n	8000872 <update_dac_values+0xc2>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, gate_out);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	461a      	mov	r2, r3
 8000866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <update_dac_values+0x11c>)
 800086c:	f002 fb62 	bl	8002f34 <HAL_GPIO_WritePin>
 8000870:	e011      	b.n	8000896 <update_dac_values+0xe6>
		} else if (i == 1) {
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d107      	bne.n	8000888 <update_dac_values+0xd8>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, gate_out);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <update_dac_values+0x11c>)
 8000882:	f002 fb57 	bl	8002f34 <HAL_GPIO_WritePin>
 8000886:	e006      	b.n	8000896 <update_dac_values+0xe6>
		} else {
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, gate_out);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	461a      	mov	r2, r3
 800088c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <update_dac_values+0x11c>)
 8000892:	f002 fb4f 	bl	8002f34 <HAL_GPIO_WritePin>
	for (i = 0; i < MAX_VOICES; i++) {
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	3301      	adds	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d98c      	bls.n	80007bc <update_dac_values+0xc>
		}
	}
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	f3af 8000 	nop.w
 80008b0:	5530aed6 	.word	0x5530aed6
 80008b4:	3fb55555 	.word	0x3fb55555
 80008b8:	66666666 	.word	0x66666666
 80008bc:	3f4a6666 	.word	0x3f4a6666
 80008c0:	20000158 	.word	0x20000158
 80008c4:	200000b4 	.word	0x200000b4
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	58021000 	.word	0x58021000

080008d0 <monitoring_buffer>:

void monitoring_buffer()
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	// monitoring output buffer.
	if (outbuf.err_distance < -1 * OUTPUT_BUFFERSIZE) {
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <monitoring_buffer+0x7c>)
 80008d6:	f9b3 3804 	ldrsh.w	r3, [r3, #2052]	; 0x804
 80008da:	f513 7f00 	cmn.w	r3, #512	; 0x200
 80008de:	da15      	bge.n	800090c <monitoring_buffer+0x3c>
		// if buffer under-run error occurs.
		outbuf.idx += OUTPUT_BUFFERSIZE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <monitoring_buffer+0x7c>)
 80008e2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <monitoring_buffer+0x7c>)
 80008f0:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		outbuf.err_distance += OUTPUT_BUFFERSIZE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <monitoring_buffer+0x7c>)
 80008f6:	f9b3 3804 	ldrsh.w	r3, [r3, #2052]	; 0x804
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000900:	b29b      	uxth	r3, r3
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <monitoring_buffer+0x7c>)
 8000906:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
	} else if (OUTPUT_BUFFERSIZE < outbuf.err_distance) {
		// if buffer over-run error occurs.
		outbuf.idx -= OUTPUT_BUFFERSIZE;
		outbuf.err_distance -= OUTPUT_BUFFERSIZE;
	}
}
 800090a:	e01a      	b.n	8000942 <monitoring_buffer+0x72>
	} else if (OUTPUT_BUFFERSIZE < outbuf.err_distance) {
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <monitoring_buffer+0x7c>)
 800090e:	f9b3 3804 	ldrsh.w	r3, [r3, #2052]	; 0x804
 8000912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000916:	dd14      	ble.n	8000942 <monitoring_buffer+0x72>
		outbuf.idx -= OUTPUT_BUFFERSIZE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <monitoring_buffer+0x7c>)
 800091a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800091e:	b29b      	uxth	r3, r3
 8000920:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <monitoring_buffer+0x7c>)
 8000928:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		outbuf.err_distance -= OUTPUT_BUFFERSIZE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <monitoring_buffer+0x7c>)
 800092e:	f9b3 3804 	ldrsh.w	r3, [r3, #2052]	; 0x804
 8000932:	b29b      	uxth	r3, r3
 8000934:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21a      	sxth	r2, r3
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <monitoring_buffer+0x7c>)
 800093e:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	200001fc 	.word	0x200001fc

08000950 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_UART_RxCpltCallback+0x2c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d107      	bne.n	8000972 <HAL_UART_RxCpltCallback+0x22>
	{
		midi_buffer_enqueue(&midi_received_buf);
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <HAL_UART_RxCpltCallback+0x30>)
 8000964:	f000 fb6e 	bl	8001044 <midi_buffer_enqueue>
		HAL_UART_Receive_IT(&huart4, &midi_received_buf, 1);
 8000968:	2201      	movs	r2, #1
 800096a:	4905      	ldr	r1, [pc, #20]	; (8000980 <HAL_UART_RxCpltCallback+0x30>)
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_RxCpltCallback+0x34>)
 800096e:	f005 f90f 	bl	8005b90 <HAL_UART_Receive_IT>
	}
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004c00 	.word	0x40004c00
 8000980:	20000a02 	.word	0x20000a02
 8000984:	2000016c 	.word	0x2000016c

08000988 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	// Emit CV/Gate voltages.
	update_dac_values();
 8000990:	f7ff ff0e 	bl	80007b0 <update_dac_values>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f001 f828 	bl	80019f4 <HAL_Init>

  /* USER CODE BEGIN Init */
	setbuf(stdout, NULL);
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x44>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f007 f9f5 	bl	8007d9c <setbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f817 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f9b9 	bl	8000d2c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ba:	f000 f963 	bl	8000c84 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009be:	f000 f9ad 	bl	8000d1c <MX_USB_OTG_HS_USB_Init>
  MX_DAC1_Init();
 80009c2:	f000 f87f 	bl	8000ac4 <MX_DAC1_Init>
  MX_DAC2_Init();
 80009c6:	f000 f8b9 	bl	8000b3c <MX_DAC2_Init>
  MX_TIM16_Init();
 80009ca:	f000 f8e9 	bl	8000ba0 <MX_TIM16_Init>
  MX_UART4_Init();
 80009ce:	f000 f90d 	bl	8000bec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	user_init();
 80009d2:	f7ff feb7 	bl	8000744 <user_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Check for new MIDI events in the queue.
		midi_main();
 80009d6:	f000 fadf 	bl	8000f98 <midi_main>

		// Buffer maintenance.
		monitoring_buffer();
 80009da:	f7ff ff79 	bl	80008d0 <monitoring_buffer>
		midi_main();
 80009de:	e7fa      	b.n	80009d6 <main+0x3a>
 80009e0:	20000010 	.word	0x20000010

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 f910 	bl	8007c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 f90a 	bl	8007c18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a04:	2004      	movs	r0, #4
 8000a06:	f002 faaf 	bl	8002f68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a26:	bf00      	nop
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <SystemClock_Config+0xdc>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d1f8      	bne.n	8000a28 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000a36:	2329      	movs	r3, #41	; 0x29
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a54:	2318      	movs	r3, #24
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a64:	230c      	movs	r3, #12
 8000a66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fad1 	bl	800301c <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a80:	f000 fa84 	bl	8000f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	233f      	movs	r3, #63	; 0x3f
 8000a86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fe9f 	bl	80037ec <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ab4:	f000 fa6a 	bl	8000f8c <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3770      	adds	r7, #112	; 0x70
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2224      	movs	r2, #36	; 0x24
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 f8a1 	bl	8007c18 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_DAC1_Init+0x70>)
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_DAC1_Init+0x74>)
 8000ada:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000adc:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_DAC1_Init+0x70>)
 8000ade:	f001 f94e 	bl	8001d7e <HAL_DAC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ae8:	f000 fa50 	bl	8000f8c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_DAC1_Init+0x70>)
 8000b08:	f001 f9d2 	bl	8001eb0 <HAL_DAC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 fa3b 	bl	8000f8c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2210      	movs	r2, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_DAC1_Init+0x70>)
 8000b1e:	f001 f9c7 	bl	8001eb0 <HAL_DAC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b28:	f000 fa30 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	40007400 	.word	0x40007400

08000b3c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2224      	movs	r2, #36	; 0x24
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f007 f865 	bl	8007c18 <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_DAC2_Init+0x5c>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_DAC2_Init+0x60>)
 8000b52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <MX_DAC2_Init+0x5c>)
 8000b56:	f001 f912 	bl	8001d7e <HAL_DAC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000b60:	f000 fa14 	bl	8000f8c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_DAC2_Init+0x5c>)
 8000b80:	f001 f996 	bl	8001eb0 <HAL_DAC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_DAC2_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 f9ff 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000a0 	.word	0x200000a0
 8000b9c:	58003400 	.word	0x58003400

08000ba0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <MX_TIM16_Init+0x48>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_TIM16_Init+0x44>)
 8000bd2:	f004 fcc5 	bl	8005560 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000bdc:	f000 f9d6 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000a04 	.word	0x20000a04
 8000be8:	40014400 	.word	0x40014400

08000bec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_UART4_Init+0x90>)
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <MX_UART4_Init+0x94>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_UART4_Init+0x90>)
 8000bf8:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000bfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c36:	f004 ff5b 	bl	8005af0 <HAL_UART_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c40:	f000 f9a4 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c48:	f006 fee1 	bl	8007a0e <HAL_UARTEx_SetTxFifoThreshold>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c52:	f000 f99b 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c5a:	f006 ff16 	bl	8007a8a <HAL_UARTEx_SetRxFifoThreshold>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 f992 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_UART4_Init+0x90>)
 8000c6a:	f006 fe97 	bl	800799c <HAL_UARTEx_DisableFifoMode>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f98a 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000016c 	.word	0x2000016c
 8000c80:	40004c00 	.word	0x40004c00

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cce:	f004 ff0f 	bl	8005af0 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f958 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000ce0:	f006 fe95 	bl	8007a0e <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f000 f94f 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f006 feca 	bl	8007a8a <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f000 f946 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_USART3_UART_Init+0x90>)
 8000d02:	f006 fe4b 	bl	800799c <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 f93e 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000c8 	.word	0x200000c8
 8000d18:	40004800 	.word	0x40004800

08000d1c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b8a      	ldr	r3, [pc, #552]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	4a88      	ldr	r2, [pc, #544]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d52:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	623b      	str	r3, [r7, #32]
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d60:	4b82      	ldr	r3, [pc, #520]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d66:	4a81      	ldr	r2, [pc, #516]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d70:	4b7e      	ldr	r3, [pc, #504]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d84:	4a79      	ldr	r2, [pc, #484]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8e:	4b77      	ldr	r3, [pc, #476]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b73      	ldr	r3, [pc, #460]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da2:	4a72      	ldr	r2, [pc, #456]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dac:	4b6f      	ldr	r3, [pc, #444]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b6c      	ldr	r3, [pc, #432]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc0:	4a6a      	ldr	r2, [pc, #424]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dca:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd8:	4b64      	ldr	r3, [pc, #400]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dde:	4a63      	ldr	r2, [pc, #396]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de8:	4b60      	ldr	r3, [pc, #384]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e06:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b51      	ldr	r3, [pc, #324]	; (8000f6c <MX_GPIO_Init+0x240>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	484d      	ldr	r0, [pc, #308]	; (8000f70 <MX_GPIO_Init+0x244>)
 8000e3a:	f002 f87b 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e44:	484b      	ldr	r0, [pc, #300]	; (8000f74 <MX_GPIO_Init+0x248>)
 8000e46:	f002 f875 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Gate__1_Pin|Gate__2_Pin|Gate__3_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e50:	4849      	ldr	r0, [pc, #292]	; (8000f78 <MX_GPIO_Init+0x24c>)
 8000e52:	f002 f86f 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4847      	ldr	r0, [pc, #284]	; (8000f78 <MX_GPIO_Init+0x24c>)
 8000e5c:	f002 f86a 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4841      	ldr	r0, [pc, #260]	; (8000f7c <MX_GPIO_Init+0x250>)
 8000e76:	f001 fead 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4837      	ldr	r0, [pc, #220]	; (8000f70 <MX_GPIO_Init+0x244>)
 8000e94:	f001 fe9e 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e98:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4830      	ldr	r0, [pc, #192]	; (8000f74 <MX_GPIO_Init+0x248>)
 8000eb2:	f001 fe8f 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gate__1_Pin Gate__3_Pin */
  GPIO_InitStruct.Pin = Gate__1_Pin|Gate__3_Pin;
 8000eb6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <MX_GPIO_Init+0x24c>)
 8000ed0:	f001 fe80 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gate__2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Gate__2_Pin|LD2_Pin;
 8000ed4:	f244 0302 	movw	r3, #16386	; 0x4002
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4822      	ldr	r0, [pc, #136]	; (8000f78 <MX_GPIO_Init+0x24c>)
 8000eee:	f001 fe71 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_GPIO_Init+0x254>)
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	481f      	ldr	r0, [pc, #124]	; (8000f84 <MX_GPIO_Init+0x258>)
 8000f06:	f001 fe65 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x25c>)
 8000f20:	f001 fe58 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f36:	230a      	movs	r3, #10
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x25c>)
 8000f42:	f001 fe47 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000f46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <MX_GPIO_Init+0x25c>)
 8000f60:	f001 fe38 	bl	8002bd4 <HAL_GPIO_Init>

}
 8000f64:	bf00      	nop
 8000f66:	3738      	adds	r7, #56	; 0x38
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58021400 	.word	0x58021400
 8000f74:	58020400 	.word	0x58020400
 8000f78:	58021000 	.word	0x58021000
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	11110000 	.word	0x11110000
 8000f84:	58021800 	.word	0x58021800
 8000f88:	58020000 	.word	0x58020000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <midi_main>:

int midi_event_is_generated();
void midi_analyze_event();

void midi_main()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	while (midi_buffer_dequeue(&midi_buf) == BUFFER_SUCCESS) {
 8000f9c:	e006      	b.n	8000fac <midi_main+0x14>
		if (midi_event_is_generated()) {
 8000f9e:	f000 f871 	bl	8001084 <midi_event_is_generated>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <midi_main+0x14>
			// Generate MIDI event from UART buffer.
			midi_analyze_event();
 8000fa8:	f000 f9ee 	bl	8001388 <midi_analyze_event>
	while (midi_buffer_dequeue(&midi_buf) == BUFFER_SUCCESS) {
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <midi_main+0x28>)
 8000fae:	f000 f859 	bl	8001064 <midi_buffer_dequeue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d0f2      	beq.n	8000f9e <midi_main+0x6>
		}
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000a5c 	.word	0x20000a5c

08000fc4 <midi_init>:

func_status_t midi_init()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	if (ring_buffer_u8_init(&rxbuf, MIDI_BUFFER_LENGTH) == BUFFER_FAILURE) {
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <midi_init+0x4c>)
 8000fd0:	f7ff fb0a 	bl	80005e8 <ring_buffer_u8_init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <midi_init+0x1a>
		return FUNC_ERROR;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e013      	b.n	8001006 <midi_init+0x42>
	}

	uint8_t i;

	for (i = 0; i < MAX_VOICES; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	e00c      	b.n	8000ffe <midi_init+0x3a>
		midi_voice_init(&voices[i]);
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <midi_init+0x50>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f810 	bl	8001018 <midi_voice_init>
	for (i = 0; i < MAX_VOICES; i++) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d9ef      	bls.n	8000fe4 <midi_init+0x20>
	}

	return FUNC_SUCCESS;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000a50 	.word	0x20000a50
 8001014:	20000158 	.word	0x20000158

08001018 <midi_voice_init>:

void midi_voice_init(voice_t *voice) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	voice->note_number = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
	voice->active = NOTE_OFF;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	705a      	strb	r2, [r3, #1]
	voice->pitchbend = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	809a      	strh	r2, [r3, #4]
	voice->velocity = 127;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	227f      	movs	r2, #127	; 0x7f
 8001036:	805a      	strh	r2, [r3, #2]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <midi_buffer_enqueue>:

buffer_status_t midi_buffer_enqueue(uint8_t *inputc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	return ring_buffer_u8_enqueue(&rxbuf, inputc);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <midi_buffer_enqueue+0x1c>)
 8001050:	f7ff fb15 	bl	800067e <ring_buffer_u8_enqueue>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000a50 	.word	0x20000a50

08001064 <midi_buffer_dequeue>:

buffer_status_t midi_buffer_dequeue(uint8_t *buf)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	return ring_buffer_u8_dequeue(&rxbuf, buf);
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <midi_buffer_dequeue+0x1c>)
 8001070:	f7ff fb39 	bl	80006e6 <ring_buffer_u8_dequeue>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000a50 	.word	0x20000a50

08001084 <midi_event_is_generated>:

	return 0;
}

int midi_event_is_generated()
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	uint8_t upper_half_byte = midi_buf & 0xF0;
 800108a:	4b57      	ldr	r3, [pc, #348]	; (80011e8 <midi_event_is_generated+0x164>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	71fb      	strb	r3, [r7, #7]
	uint8_t lower_half_byte = midi_buf & 0x0F;
 8001094:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <midi_event_is_generated+0x164>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	71bb      	strb	r3, [r7, #6]

	if (upper_half_byte & 0x80) {
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da4d      	bge.n	8001142 <midi_event_is_generated+0xbe>
		// status byte.
		if (0xF0 != upper_half_byte) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2bf0      	cmp	r3, #240	; 0xf0
 80010aa:	f000 808d 	beq.w	80011c8 <midi_event_is_generated+0x144>
			// MIDI Channel Message.
			switch (upper_half_byte) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2be0      	cmp	r3, #224	; 0xe0
 80010b2:	d021      	beq.n	80010f8 <midi_event_is_generated+0x74>
 80010b4:	2be0      	cmp	r3, #224	; 0xe0
 80010b6:	dc3d      	bgt.n	8001134 <midi_event_is_generated+0xb0>
 80010b8:	2bc0      	cmp	r3, #192	; 0xc0
 80010ba:	d031      	beq.n	8001120 <midi_event_is_generated+0x9c>
 80010bc:	2bc0      	cmp	r3, #192	; 0xc0
 80010be:	dc39      	bgt.n	8001134 <midi_event_is_generated+0xb0>
 80010c0:	2bb0      	cmp	r3, #176	; 0xb0
 80010c2:	d023      	beq.n	800110c <midi_event_is_generated+0x88>
 80010c4:	2bb0      	cmp	r3, #176	; 0xb0
 80010c6:	dc35      	bgt.n	8001134 <midi_event_is_generated+0xb0>
 80010c8:	2b80      	cmp	r3, #128	; 0x80
 80010ca:	d00b      	beq.n	80010e4 <midi_event_is_generated+0x60>
 80010cc:	2b90      	cmp	r3, #144	; 0x90
 80010ce:	d131      	bne.n	8001134 <midi_event_is_generated+0xb0>
				case 0x90:
					// Note On Message.
					midi_event.type = MSG_NOTE_ON;
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <midi_event_is_generated+0x168>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = WAIT_DATA1;
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <midi_event_is_generated+0x16c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
					midi_event.channel = lower_half_byte;
 80010dc:	4a43      	ldr	r2, [pc, #268]	; (80011ec <midi_event_is_generated+0x168>)
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	7053      	strb	r3, [r2, #1]
					break;
 80010e2:	e074      	b.n	80011ce <midi_event_is_generated+0x14a>

				case 0x80:
					// Note Off Message.
					midi_event.type = MSG_NOTE_OFF;
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <midi_event_is_generated+0x168>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = WAIT_DATA1;
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <midi_event_is_generated+0x16c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
					midi_event.channel = lower_half_byte;
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <midi_event_is_generated+0x168>)
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	7053      	strb	r3, [r2, #1]
					break;
 80010f6:	e06a      	b.n	80011ce <midi_event_is_generated+0x14a>

				case 0xE0:
					// Pitch Bend.
					midi_event.type = MSG_PITCH;
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <midi_event_is_generated+0x168>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = WAIT_DATA1;
 80010fe:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <midi_event_is_generated+0x16c>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
					midi_event.channel = lower_half_byte;
 8001104:	4a39      	ldr	r2, [pc, #228]	; (80011ec <midi_event_is_generated+0x168>)
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	7053      	strb	r3, [r2, #1]
					break;
 800110a:	e060      	b.n	80011ce <midi_event_is_generated+0x14a>

				case 0xB0:
					// Control Change
					midi_event.type = MSG_CC;
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <midi_event_is_generated+0x168>)
 800110e:	2204      	movs	r2, #4
 8001110:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = WAIT_DATA1;
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <midi_event_is_generated+0x16c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
					midi_event.channel = lower_half_byte;
 8001118:	4a34      	ldr	r2, [pc, #208]	; (80011ec <midi_event_is_generated+0x168>)
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	7053      	strb	r3, [r2, #1]
					break;
 800111e:	e056      	b.n	80011ce <midi_event_is_generated+0x14a>

				case 0xC0:
					// Program Change
					midi_event.type = MSG_PROG;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <midi_event_is_generated+0x168>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = WAIT_DATA1;
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <midi_event_is_generated+0x16c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
					midi_event.channel = lower_half_byte;
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <midi_event_is_generated+0x168>)
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	7053      	strb	r3, [r2, #1]
					break;
 8001132:	e04c      	b.n	80011ce <midi_event_is_generated+0x14a>

				default:
					midi_event.type = MSG_NOTHING;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <midi_event_is_generated+0x168>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = START_ANALYSIS;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <midi_event_is_generated+0x16c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
					break;
 8001140:	e045      	b.n	80011ce <midi_event_is_generated+0x14a>
			}
		}
	} else {
		// data byte
		switch (analyzed_status.stat) {
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <midi_event_is_generated+0x16c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d840      	bhi.n	80011cc <midi_event_is_generated+0x148>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <midi_event_is_generated+0xcc>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	080011cd 	.word	0x080011cd
 8001154:	08001161 	.word	0x08001161
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011b9 	.word	0x080011b9
			case WAIT_DATA1:
				midi_event.data_byte[0] = midi_buf;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <midi_event_is_generated+0x164>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <midi_event_is_generated+0x168>)
 8001166:	709a      	strb	r2, [r3, #2]
				if (midi_event.type == MSG_NOTE_ON ||
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <midi_event_is_generated+0x168>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00b      	beq.n	8001188 <midi_event_is_generated+0x104>
					midi_event.type == MSG_NOTE_OFF ||
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <midi_event_is_generated+0x168>)
 8001172:	781b      	ldrb	r3, [r3, #0]
				if (midi_event.type == MSG_NOTE_ON ||
 8001174:	2b02      	cmp	r3, #2
 8001176:	d007      	beq.n	8001188 <midi_event_is_generated+0x104>
					midi_event.type == MSG_PITCH ||
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <midi_event_is_generated+0x168>)
 800117a:	781b      	ldrb	r3, [r3, #0]
					midi_event.type == MSG_NOTE_OFF ||
 800117c:	2b03      	cmp	r3, #3
 800117e:	d003      	beq.n	8001188 <midi_event_is_generated+0x104>
					midi_event.type == MSG_CC)
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <midi_event_is_generated+0x168>)
 8001182:	781b      	ldrb	r3, [r3, #0]
					midi_event.type == MSG_PITCH ||
 8001184:	2b04      	cmp	r3, #4
 8001186:	d103      	bne.n	8001190 <midi_event_is_generated+0x10c>
				{
					analyzed_status.stat = WAIT_DATA2;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <midi_event_is_generated+0x16c>)
 800118a:	2202      	movs	r2, #2
 800118c:	701a      	strb	r2, [r3, #0]
					analyzed_status.stat = END_ANALYSIS;
				} else {
					analyzed_status.stat = START_ANALYSIS;
				}

				break;
 800118e:	e01e      	b.n	80011ce <midi_event_is_generated+0x14a>
				} else if (midi_event.type == MSG_PROG) {
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <midi_event_is_generated+0x168>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b05      	cmp	r3, #5
 8001196:	d103      	bne.n	80011a0 <midi_event_is_generated+0x11c>
					analyzed_status.stat = END_ANALYSIS;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <midi_event_is_generated+0x16c>)
 800119a:	2203      	movs	r2, #3
 800119c:	701a      	strb	r2, [r3, #0]
				break;
 800119e:	e016      	b.n	80011ce <midi_event_is_generated+0x14a>
					analyzed_status.stat = START_ANALYSIS;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <midi_event_is_generated+0x16c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
				break;
 80011a6:	e012      	b.n	80011ce <midi_event_is_generated+0x14a>

			case WAIT_DATA2:
				midi_event.data_byte[1] = midi_buf;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <midi_event_is_generated+0x164>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <midi_event_is_generated+0x168>)
 80011ae:	70da      	strb	r2, [r3, #3]
				analyzed_status.stat = END_ANALYSIS;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <midi_event_is_generated+0x16c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	701a      	strb	r2, [r3, #0]

				break;
 80011b6:	e00a      	b.n	80011ce <midi_event_is_generated+0x14a>

			case END_ANALYSIS:
				// running status
				midi_event.data_byte[0] = midi_buf;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <midi_event_is_generated+0x164>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <midi_event_is_generated+0x168>)
 80011be:	709a      	strb	r2, [r3, #2]
				analyzed_status.stat = WAIT_DATA2;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <midi_event_is_generated+0x16c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]

				break;
 80011c6:	e002      	b.n	80011ce <midi_event_is_generated+0x14a>
		}
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <midi_event_is_generated+0x14a>

			case START_ANALYSIS:
				break;

			default:
				break;
 80011cc:	bf00      	nop
		}
	}

	return analyzed_status.stat == END_ANALYSIS;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <midi_event_is_generated+0x16c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000a5c 	.word	0x20000a5c
 80011ec:	20000a60 	.word	0x20000a60
 80011f0:	20000a6c 	.word	0x20000a6c

080011f4 <midi_set_note_on>:

void midi_set_note_on()
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < MAX_VOICES; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e030      	b.n	8001262 <midi_set_note_on+0x6e>
		if (voices[i].active == NOTE_OFF) {
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	491d      	ldr	r1, [pc, #116]	; (8001278 <midi_set_note_on+0x84>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	440b      	add	r3, r1
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d122      	bne.n	800125c <midi_set_note_on+0x68>
			voices[i].active = NOTE_ON;
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	4917      	ldr	r1, [pc, #92]	; (8001278 <midi_set_note_on+0x84>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	440b      	add	r3, r1
 8001224:	3301      	adds	r3, #1
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
			voices[i].note_number = midi_event.data_byte[0];
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <midi_set_note_on+0x88>)
 800122e:	7898      	ldrb	r0, [r3, #2]
 8001230:	4911      	ldr	r1, [pc, #68]	; (8001278 <midi_set_note_on+0x84>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	440b      	add	r3, r1
 800123c:	4602      	mov	r2, r0
 800123e:	701a      	strb	r2, [r3, #0]
			voices[i].velocity = midi_event.data_byte[1];
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <midi_set_note_on+0x88>)
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	b298      	uxth	r0, r3
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <midi_set_note_on+0x84>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	440b      	add	r3, r1
 8001254:	3302      	adds	r3, #2
 8001256:	4602      	mov	r2, r0
 8001258:	801a      	strh	r2, [r3, #0]

			break;
 800125a:	e006      	b.n	800126a <midi_set_note_on+0x76>
	for (i = 0; i < MAX_VOICES; i++) {
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	3301      	adds	r3, #1
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d9cb      	bls.n	8001200 <midi_set_note_on+0xc>
		}
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000158 	.word	0x20000158
 800127c:	20000a60 	.word	0x20000a60

08001280 <midi_set_note_off>:

void midi_set_note_off()
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < MAX_VOICES; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	e031      	b.n	80012f0 <midi_set_note_off+0x70>
		if (voices[i].active == NOTE_ON && voices[i].note_number == midi_event.data_byte[0]) {
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	491d      	ldr	r1, [pc, #116]	; (8001304 <midi_set_note_off+0x84>)
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	3301      	adds	r3, #1
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d123      	bne.n	80012ea <midi_set_note_off+0x6a>
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	4917      	ldr	r1, [pc, #92]	; (8001304 <midi_set_note_off+0x84>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <midi_set_note_off+0x88>)
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d117      	bne.n	80012ea <midi_set_note_off+0x6a>
			voices[i].active = NOTE_OFF;
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	4911      	ldr	r1, [pc, #68]	; (8001304 <midi_set_note_off+0x84>)
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	440b      	add	r3, r1
 80012c8:	3301      	adds	r3, #1
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
			// voices[i].note_number = 0;
			voices[i].velocity = midi_event.data_byte[1];
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <midi_set_note_off+0x88>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	b298      	uxth	r0, r3
 80012d6:	490b      	ldr	r1, [pc, #44]	; (8001304 <midi_set_note_off+0x84>)
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	440b      	add	r3, r1
 80012e2:	3302      	adds	r3, #2
 80012e4:	4602      	mov	r2, r0
 80012e6:	801a      	strh	r2, [r3, #0]

			break;
 80012e8:	e006      	b.n	80012f8 <midi_set_note_off+0x78>
	for (i = 0; i < MAX_VOICES; i++) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3301      	adds	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d9ca      	bls.n	800128c <midi_set_note_off+0xc>
		}
	}
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000158 	.word	0x20000158
 8001308:	20000a60 	.word	0x20000a60

0800130c <midi_set_pitch_bend>:

void midi_set_pitch_bend()
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	uint16_t lsb = midi_event.data_byte[0];
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <midi_set_pitch_bend+0x58>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	80bb      	strh	r3, [r7, #4]
	uint16_t msb = midi_event.data_byte[1];
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <midi_set_pitch_bend+0x58>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	807b      	strh	r3, [r7, #2]
	uint16_t pitchbend = (((msb) & 0x7F) << 7) + (lsb);
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	01db      	lsls	r3, r3, #7
 8001322:	b29b      	uxth	r3, r3
 8001324:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8001328:	b29a      	uxth	r2, r3
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	for (i = 0; i < MAX_VOICES; i++) {
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	e00c      	b.n	8001350 <midi_set_pitch_bend+0x44>
		voices[i].pitchbend = pitchbend;
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	490b      	ldr	r1, [pc, #44]	; (8001368 <midi_set_pitch_bend+0x5c>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	883a      	ldrh	r2, [r7, #0]
 8001348:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < MAX_VOICES; i++) {
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	3301      	adds	r3, #1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d9ef      	bls.n	8001336 <midi_set_pitch_bend+0x2a>
	}
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000a60 	.word	0x20000a60
 8001368:	20000158 	.word	0x20000158

0800136c <midi_set_control_change>:

void midi_set_control_change()
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return;
 8001370:	bf00      	nop
}
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <midi_set_program_change>:

void midi_set_program_change()
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
	return;
 800137e:	bf00      	nop
}
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <midi_analyze_event>:

void midi_analyze_event()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (midi_event.channel != root.channel_number) {
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <midi_analyze_event+0x5c>)
 800138e:	785a      	ldrb	r2, [r3, #1]
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <midi_analyze_event+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d120      	bne.n	80013da <midi_analyze_event+0x52>
		return;
	}

	switch (midi_event.type) {
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <midi_analyze_event+0x5c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d81d      	bhi.n	80013de <midi_analyze_event+0x56>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <midi_analyze_event+0x20>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013bd 	.word	0x080013bd
 80013ac:	080013c3 	.word	0x080013c3
 80013b0:	080013c9 	.word	0x080013c9
 80013b4:	080013cf 	.word	0x080013cf
 80013b8:	080013d5 	.word	0x080013d5
		case MSG_NOTE_ON:
			midi_set_note_on();
 80013bc:	f7ff ff1a 	bl	80011f4 <midi_set_note_on>
			break;
 80013c0:	e00e      	b.n	80013e0 <midi_analyze_event+0x58>

		case MSG_NOTE_OFF:
			midi_set_note_off();
 80013c2:	f7ff ff5d 	bl	8001280 <midi_set_note_off>
			break;
 80013c6:	e00b      	b.n	80013e0 <midi_analyze_event+0x58>

		case MSG_PITCH:
			midi_set_pitch_bend();
 80013c8:	f7ff ffa0 	bl	800130c <midi_set_pitch_bend>
			break;
 80013cc:	e008      	b.n	80013e0 <midi_analyze_event+0x58>

		case MSG_CC:
			midi_set_control_change();
 80013ce:	f7ff ffcd 	bl	800136c <midi_set_control_change>
			break;
 80013d2:	e005      	b.n	80013e0 <midi_analyze_event+0x58>

		case MSG_PROG:
			midi_set_program_change();
 80013d4:	f7ff ffd1 	bl	800137a <midi_set_program_change>
			break;
 80013d8:	e002      	b.n	80013e0 <midi_analyze_event+0x58>
		return;
 80013da:	bf00      	nop
 80013dc:	e000      	b.n	80013e0 <midi_analyze_event+0x58>

		default:
			break;
 80013de:	bf00      	nop
	}
}
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000a60 	.word	0x20000a60
 80013e8:	20000a68 	.word	0x20000a68

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_MspInit+0x30>)
 80013f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x30>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x30>)
 8001404:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58024400 	.word	0x58024400

08001420 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a39      	ldr	r2, [pc, #228]	; (8001524 <HAL_DAC_MspInit+0x104>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d133      	bne.n	80014aa <HAL_DAC_MspInit+0x8a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DAC12_CLK_ENABLED++;
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_DAC_MspInit+0x108>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a37      	ldr	r2, [pc, #220]	; (8001528 <HAL_DAC_MspInit+0x108>)
 800144a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DAC12_CLK_ENABLED==1){
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_DAC_MspInit+0x108>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10e      	bne.n	8001472 <HAL_DAC_MspInit+0x52>
      __HAL_RCC_DAC12_CLK_ENABLE();
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <HAL_DAC_MspInit+0x10c>)
 8001456:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800145a:	4a34      	ldr	r2, [pc, #208]	; (800152c <HAL_DAC_MspInit+0x10c>)
 800145c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001460:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_DAC_MspInit+0x10c>)
 8001466:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800146a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_DAC_MspInit+0x10c>)
 8001474:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <HAL_DAC_MspInit+0x10c>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_DAC_MspInit+0x10c>)
 8001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001490:	2330      	movs	r3, #48	; 0x30
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <HAL_DAC_MspInit+0x110>)
 80014a4:	f001 fb96 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80014a8:	e037      	b.n	800151a <HAL_DAC_MspInit+0xfa>
  else if(hdac->Instance==DAC2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_DAC_MspInit+0x114>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d132      	bne.n	800151a <HAL_DAC_MspInit+0xfa>
    HAL_RCC_DAC12_CLK_ENABLED++;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_DAC_MspInit+0x108>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_DAC_MspInit+0x108>)
 80014bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DAC12_CLK_ENABLED==1){
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_DAC_MspInit+0x108>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10e      	bne.n	80014e4 <HAL_DAC_MspInit+0xc4>
      __HAL_RCC_DAC12_CLK_ENABLE();
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_DAC_MspInit+0x10c>)
 80014f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001502:	2340      	movs	r3, #64	; 0x40
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_DAC_MspInit+0x110>)
 8001516:	f001 fb5d 	bl	8002bd4 <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40007400 	.word	0x40007400
 8001528:	20000090 	.word	0x20000090
 800152c:	58024400 	.word	0x58024400
 8001530:	58020000 	.word	0x58020000
 8001534:	58003400 	.word	0x58003400

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d116      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_TIM_Base_MspInit+0x4c>)
 800154c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_TIM_Base_MspInit+0x4c>)
 8001552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001556:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_Base_MspInit+0x4c>)
 800155c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2075      	movs	r0, #117	; 0x75
 800156e:	f000 fbd2 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001572:	2075      	movs	r0, #117	; 0x75
 8001574:	f000 fbe9 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40014400 	.word	0x40014400
 8001584:	58024400 	.word	0x58024400

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ba      	sub	sp, #232	; 0xe8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	22b8      	movs	r2, #184	; 0xb8
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fb35 	bl	8007c18 <memset>
  if(huart->Instance==UART4)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <HAL_UART_MspInit+0x160>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d14a      	bne.n	800164e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fc9c 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f7ff fcdb 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015d6:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_UART_MspInit+0x164>)
 80015d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015dc:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_UART_MspInit+0x164>)
 80015de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_UART_MspInit+0x164>)
 80015e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_UART_MspInit+0x164>)
 80015f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fa:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <HAL_UART_MspInit+0x164>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_UART_MspInit+0x164>)
 8001606:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MIDI_In_Pin|MIDI_InA1_Pin;
 8001612:	2303      	movs	r3, #3
 8001614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800162a:	2308      	movs	r3, #8
 800162c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001634:	4619      	mov	r1, r3
 8001636:	482e      	ldr	r0, [pc, #184]	; (80016f0 <HAL_UART_MspInit+0x168>)
 8001638:	f001 facc 	bl	8002bd4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2034      	movs	r0, #52	; 0x34
 8001642:	f000 fb68 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001646:	2034      	movs	r0, #52	; 0x34
 8001648:	f000 fb7f 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800164c:	e047      	b.n	80016de <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_UART_MspInit+0x16c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d142      	bne.n	80016de <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fc4c 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001672:	f7ff fc8b 	bl	8000f8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_UART_MspInit+0x164>)
 8001678:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_UART_MspInit+0x164>)
 800167e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001682:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x164>)
 8001688:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0x164>)
 8001696:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_UART_MspInit+0x164>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0x164>)
 80016a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016cc:	2307      	movs	r3, #7
 80016ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_UART_MspInit+0x170>)
 80016da:	f001 fa7b 	bl	8002bd4 <HAL_GPIO_Init>
}
 80016de:	bf00      	nop
 80016e0:	37e8      	adds	r7, #232	; 0xe8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40004c00 	.word	0x40004c00
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020000 	.word	0x58020000
 80016f4:	40004800 	.word	0x40004800
 80016f8:	58020c00 	.word	0x58020c00

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f9c6 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <UART4_IRQHandler+0x10>)
 8001756:	f004 fa61 	bl	8005c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000016c 	.word	0x2000016c

08001764 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM16_IRQHandler+0x10>)
 800176a:	f003 ffc1 	bl	80056f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000a04 	.word	0x20000a04

08001778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e00a      	b.n	80017a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800178a:	f3af 8000 	nop.w
 800178e:	4601      	mov	r1, r0
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf0      	blt.n	800178a <_read+0x12>
	}

return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e009      	b.n	80017d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	60ba      	str	r2, [r7, #8]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf1      	blt.n	80017c4 <_write+0x12>
	}
	return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_close>:

int _close(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
	return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001812:	605a      	str	r2, [r3, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
	return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f006 f99a 	bl	8007ba4 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20020000 	.word	0x20020000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000094 	.word	0x20000094
 80018a4:	20000a88 	.word	0x20000a88

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <SystemInit+0xd8>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a33      	ldr	r2, [pc, #204]	; (8001980 <SystemInit+0xd8>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <SystemInit+0xdc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d807      	bhi.n	80018d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <SystemInit+0xdc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 030f 	bic.w	r3, r3, #15
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <SystemInit+0xdc>)
 80018d2:	f043 0303 	orr.w	r3, r3, #3
 80018d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <SystemInit+0xe0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <SystemInit+0xe0>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <SystemInit+0xe0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <SystemInit+0xe0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4926      	ldr	r1, [pc, #152]	; (8001988 <SystemInit+0xe0>)
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <SystemInit+0xe4>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <SystemInit+0xdc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <SystemInit+0xdc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 030f 	bic.w	r3, r3, #15
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <SystemInit+0xdc>)
 800190c:	f043 0303 	orr.w	r3, r3, #3
 8001910:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <SystemInit+0xe0>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <SystemInit+0xe0>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <SystemInit+0xe0>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <SystemInit+0xe0>)
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <SystemInit+0xe8>)
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <SystemInit+0xe0>)
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <SystemInit+0xec>)
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <SystemInit+0xe0>)
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <SystemInit+0xf0>)
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <SystemInit+0xe0>)
 8001938:	2200      	movs	r2, #0
 800193a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <SystemInit+0xe0>)
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <SystemInit+0xf0>)
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <SystemInit+0xe0>)
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <SystemInit+0xe0>)
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <SystemInit+0xf0>)
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <SystemInit+0xe0>)
 8001950:	2200      	movs	r2, #0
 8001952:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <SystemInit+0xe0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <SystemInit+0xe0>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <SystemInit+0xe0>)
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <SystemInit+0xf4>)
 8001968:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800196c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0xd8>)
 8001970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001974:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	52002000 	.word	0x52002000
 8001988:	58024400 	.word	0x58024400
 800198c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001990:	02020200 	.word	0x02020200
 8001994:	01ff0000 	.word	0x01ff0000
 8001998:	01010280 	.word	0x01010280
 800199c:	52004000 	.word	0x52004000

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff ff80 	bl	80018a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f006 f8ef 	bl	8007bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7fe ffe3 	bl	800099c <main>
  bx  lr
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019e4:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 80019e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019ec:	20000a84 	.word	0x20000a84

080019f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f000 f980 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a00:	f002 f8aa 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4913      	ldr	r1, [pc, #76]	; (8001a60 <HAL_Init+0x6c>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_Init+0x6c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_Init+0x70>)
 8001a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_Init+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f814 	bl	8001a6c <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e002      	b.n	8001a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4e:	f7ff fccd 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	0800845c 	.word	0x0800845c
 8001a64:	20000004 	.word	0x20000004
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_InitTick+0x60>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e021      	b.n	8001ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_InitTick+0x64>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_InitTick+0x60>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f965 	bl	8001d66 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f92f 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x68>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	20000a70 	.word	0x20000a70

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000a70 	.word	0x20000a70

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00
 8001ba4:	05fa0000 	.word	0x05fa0000

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff29 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d24:	f7ff ff40 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff90 	bl	8001c54 <NVIC_EncodePriority>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5f 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff33 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffa4 	bl	8001cbc <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e014      	b.n	8001dba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	791b      	ldrb	r3, [r3, #4]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fb3d 	bl	8001420 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	795b      	ldrb	r3, [r3, #5]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_DAC_Start+0x16>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e040      	b.n	8001e5a <HAL_DAC_Start+0x98>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d11d      	bne.n	8001e4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	e014      	b.n	8001e4c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2102      	movs	r1, #2
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0202 	orr.w	r2, r2, #2
 8001e4a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e004      	b.n	8001e9a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3314      	adds	r3, #20
 8001e98:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DAC_ConfigChannel+0x18>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e11d      	b.n	8002104 <HAL_DAC_ConfigChannel+0x254>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d174      	bne.n	8001fc6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001edc:	f7ff fe10 	bl	8001b00 <HAL_GetTick>
 8001ee0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d134      	bne.n	8001f52 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ee8:	e011      	b.n	8001f0e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001eea:	f7ff fe09 	bl	8001b00 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d90a      	bls.n	8001f0e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f043 0208 	orr.w	r2, r3, #8
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2203      	movs	r2, #3
 8001f08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0fa      	b.n	8002104 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f14:	4b7d      	ldr	r3, [pc, #500]	; (800210c <HAL_DAC_ConfigChannel+0x25c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e6      	bne.n	8001eea <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff fdfb 	bl	8001b18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	6992      	ldr	r2, [r2, #24]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2c:	e01e      	b.n	8001f6c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f2e:	f7ff fde7 	bl	8001b00 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d90a      	bls.n	8001f52 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f043 0208 	orr.w	r2, r3, #8
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0d8      	b.n	8002104 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	dbe8      	blt.n	8001f2e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff fddb 	bl	8001b18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	6992      	ldr	r2, [r2, #24]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	ea02 0103 	and.w	r1, r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	21ff      	movs	r1, #255	; 0xff
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	ea02 0103 	and.w	r1, r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d11d      	bne.n	800200a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2207      	movs	r2, #7
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4013      	ands	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e00f      	b.n	8002054 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d102      	bne.n	8002042 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800203c:	2301      	movs	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	e008      	b.n	8002054 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e001      	b.n	8002054 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4013      	ands	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	22c0      	movs	r2, #192	; 0xc0
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20008000 	.word	0x20008000

08002110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff fcf2 	bl	8001b00 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e2dc      	b.n	80026e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e2cd      	b.n	80026e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a76      	ldr	r2, [pc, #472]	; (8002324 <HAL_DMA_Abort+0x214>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04a      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a74      	ldr	r2, [pc, #464]	; (8002328 <HAL_DMA_Abort+0x218>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a73      	ldr	r2, [pc, #460]	; (800232c <HAL_DMA_Abort+0x21c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d040      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_DMA_Abort+0x220>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a70      	ldr	r2, [pc, #448]	; (8002334 <HAL_DMA_Abort+0x224>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d036      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_DMA_Abort+0x228>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6d      	ldr	r2, [pc, #436]	; (800233c <HAL_DMA_Abort+0x22c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6b      	ldr	r2, [pc, #428]	; (8002340 <HAL_DMA_Abort+0x230>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_DMA_Abort+0x234>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	; (8002348 <HAL_DMA_Abort+0x238>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a67      	ldr	r2, [pc, #412]	; (800234c <HAL_DMA_Abort+0x23c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_DMA_Abort+0x240>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a64      	ldr	r2, [pc, #400]	; (8002354 <HAL_DMA_Abort+0x244>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a62      	ldr	r2, [pc, #392]	; (8002358 <HAL_DMA_Abort+0x248>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a61      	ldr	r2, [pc, #388]	; (800235c <HAL_DMA_Abort+0x24c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_Abort+0xd6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5f      	ldr	r2, [pc, #380]	; (8002360 <HAL_DMA_Abort+0x250>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_DMA_Abort+0xda>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_DMA_Abort+0xdc>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 021e 	bic.w	r2, r2, #30
 80021fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e00a      	b.n	800222e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020e 	bic.w	r2, r2, #14
 8002226:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3c      	ldr	r2, [pc, #240]	; (8002324 <HAL_DMA_Abort+0x214>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d072      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_DMA_Abort+0x218>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d06d      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a39      	ldr	r2, [pc, #228]	; (800232c <HAL_DMA_Abort+0x21c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d068      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a37      	ldr	r2, [pc, #220]	; (8002330 <HAL_DMA_Abort+0x220>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d063      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a36      	ldr	r2, [pc, #216]	; (8002334 <HAL_DMA_Abort+0x224>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d05e      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_DMA_Abort+0x228>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d059      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a33      	ldr	r2, [pc, #204]	; (800233c <HAL_DMA_Abort+0x22c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d054      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_DMA_Abort+0x230>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04f      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_DMA_Abort+0x234>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04a      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_DMA_Abort+0x238>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d045      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_DMA_Abort+0x23c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d040      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <HAL_DMA_Abort+0x240>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d03b      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_DMA_Abort+0x244>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d036      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_DMA_Abort+0x248>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_DMA_Abort+0x24c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d02c      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_DMA_Abort+0x250>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d027      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_DMA_Abort+0x254>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_Abort+0x258>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01d      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_DMA_Abort+0x25c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d018      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_DMA_Abort+0x260>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_DMA_Abort+0x264>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_DMA_Abort+0x268>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_DMA_Abort+0x26c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Abort+0x20e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_DMA_Abort+0x270>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d132      	bne.n	8002384 <HAL_DMA_Abort+0x274>
 800231e:	2301      	movs	r3, #1
 8002320:	e031      	b.n	8002386 <HAL_DMA_Abort+0x276>
 8002322:	bf00      	nop
 8002324:	40020010 	.word	0x40020010
 8002328:	40020028 	.word	0x40020028
 800232c:	40020040 	.word	0x40020040
 8002330:	40020058 	.word	0x40020058
 8002334:	40020070 	.word	0x40020070
 8002338:	40020088 	.word	0x40020088
 800233c:	400200a0 	.word	0x400200a0
 8002340:	400200b8 	.word	0x400200b8
 8002344:	40020410 	.word	0x40020410
 8002348:	40020428 	.word	0x40020428
 800234c:	40020440 	.word	0x40020440
 8002350:	40020458 	.word	0x40020458
 8002354:	40020470 	.word	0x40020470
 8002358:	40020488 	.word	0x40020488
 800235c:	400204a0 	.word	0x400204a0
 8002360:	400204b8 	.word	0x400204b8
 8002364:	58025408 	.word	0x58025408
 8002368:	5802541c 	.word	0x5802541c
 800236c:	58025430 	.word	0x58025430
 8002370:	58025444 	.word	0x58025444
 8002374:	58025458 	.word	0x58025458
 8002378:	5802546c 	.word	0x5802546c
 800237c:	58025480 	.word	0x58025480
 8002380:	58025494 	.word	0x58025494
 8002384:	2300      	movs	r3, #0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002398:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6d      	ldr	r2, [pc, #436]	; (8002554 <HAL_DMA_Abort+0x444>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6b      	ldr	r2, [pc, #428]	; (8002558 <HAL_DMA_Abort+0x448>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_DMA_Abort+0x44c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a68      	ldr	r2, [pc, #416]	; (8002560 <HAL_DMA_Abort+0x450>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a67      	ldr	r2, [pc, #412]	; (8002564 <HAL_DMA_Abort+0x454>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_DMA_Abort+0x458>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a64      	ldr	r2, [pc, #400]	; (800256c <HAL_DMA_Abort+0x45c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a62      	ldr	r2, [pc, #392]	; (8002570 <HAL_DMA_Abort+0x460>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a61      	ldr	r2, [pc, #388]	; (8002574 <HAL_DMA_Abort+0x464>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5f      	ldr	r2, [pc, #380]	; (8002578 <HAL_DMA_Abort+0x468>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_DMA_Abort+0x46c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a5c      	ldr	r2, [pc, #368]	; (8002580 <HAL_DMA_Abort+0x470>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_DMA_Abort+0x474>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a59      	ldr	r2, [pc, #356]	; (8002588 <HAL_DMA_Abort+0x478>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_DMA_Abort+0x47c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_Abort+0x32a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_DMA_Abort+0x480>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <HAL_DMA_Abort+0x33c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e007      	b.n	800245c <HAL_DMA_Abort+0x34c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800245c:	e013      	b.n	8002486 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245e:	f7ff fb4f 	bl	8001b00 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b05      	cmp	r3, #5
 800246a:	d90c      	bls.n	8002486 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e12d      	b.n	80026e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1e5      	bne.n	800245e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <HAL_DMA_Abort+0x444>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d04a      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <HAL_DMA_Abort+0x448>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d045      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_DMA_Abort+0x44c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d040      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2a      	ldr	r2, [pc, #168]	; (8002560 <HAL_DMA_Abort+0x450>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d03b      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a29      	ldr	r2, [pc, #164]	; (8002564 <HAL_DMA_Abort+0x454>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d036      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_DMA_Abort+0x458>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_DMA_Abort+0x45c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d02c      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_DMA_Abort+0x460>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d027      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_DMA_Abort+0x464>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_DMA_Abort+0x468>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01d      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_DMA_Abort+0x46c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <HAL_DMA_Abort+0x470>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_DMA_Abort+0x474>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_DMA_Abort+0x478>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_DMA_Abort+0x47c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Abort+0x422>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_DMA_Abort+0x480>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_DMA_Abort+0x426>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_DMA_Abort+0x428>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02b      	beq.n	8002594 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	223f      	movs	r2, #63	; 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e02a      	b.n	80025aa <HAL_DMA_Abort+0x49a>
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4f      	ldr	r2, [pc, #316]	; (80026ec <HAL_DMA_Abort+0x5dc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d072      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_DMA_Abort+0x5e0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d06d      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_DMA_Abort+0x5e4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d068      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_DMA_Abort+0x5e8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d063      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a49      	ldr	r2, [pc, #292]	; (80026fc <HAL_DMA_Abort+0x5ec>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d05e      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_DMA_Abort+0x5f0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d059      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_DMA_Abort+0x5f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d054      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a44      	ldr	r2, [pc, #272]	; (8002708 <HAL_DMA_Abort+0x5f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d04f      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a43      	ldr	r2, [pc, #268]	; (800270c <HAL_DMA_Abort+0x5fc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d04a      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a41      	ldr	r2, [pc, #260]	; (8002710 <HAL_DMA_Abort+0x600>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d045      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_DMA_Abort+0x604>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d040      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3e      	ldr	r2, [pc, #248]	; (8002718 <HAL_DMA_Abort+0x608>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d03b      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_DMA_Abort+0x60c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d036      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <HAL_DMA_Abort+0x610>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d031      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_DMA_Abort+0x614>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d02c      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <HAL_DMA_Abort+0x618>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d027      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_DMA_Abort+0x61c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d022      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	; (8002730 <HAL_DMA_Abort+0x620>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01d      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_DMA_Abort+0x624>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d018      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a32      	ldr	r2, [pc, #200]	; (8002738 <HAL_DMA_Abort+0x628>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_DMA_Abort+0x62c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_DMA_Abort+0x630>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2e      	ldr	r2, [pc, #184]	; (8002744 <HAL_DMA_Abort+0x634>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_DMA_Abort+0x58a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <HAL_DMA_Abort+0x638>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_DMA_Abort+0x58e>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_DMA_Abort+0x590>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
 800272c:	58025408 	.word	0x58025408
 8002730:	5802541c 	.word	0x5802541c
 8002734:	58025430 	.word	0x58025430
 8002738:	58025444 	.word	0x58025444
 800273c:	58025458 	.word	0x58025458
 8002740:	5802546c 	.word	0x5802546c
 8002744:	58025480 	.word	0x58025480
 8002748:	58025494 	.word	0x58025494

0800274c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e205      	b.n	8002b6a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e1fa      	b.n	8002b6a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8c      	ldr	r2, [pc, #560]	; (80029ac <HAL_DMA_Abort_IT+0x260>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a8b      	ldr	r2, [pc, #556]	; (80029b0 <HAL_DMA_Abort_IT+0x264>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a89      	ldr	r2, [pc, #548]	; (80029b4 <HAL_DMA_Abort_IT+0x268>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a88      	ldr	r2, [pc, #544]	; (80029b8 <HAL_DMA_Abort_IT+0x26c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a86      	ldr	r2, [pc, #536]	; (80029bc <HAL_DMA_Abort_IT+0x270>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a85      	ldr	r2, [pc, #532]	; (80029c0 <HAL_DMA_Abort_IT+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <HAL_DMA_Abort_IT+0x278>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a82      	ldr	r2, [pc, #520]	; (80029c8 <HAL_DMA_Abort_IT+0x27c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_DMA_Abort_IT+0x280>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_DMA_Abort_IT+0x284>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7d      	ldr	r2, [pc, #500]	; (80029d4 <HAL_DMA_Abort_IT+0x288>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7c      	ldr	r2, [pc, #496]	; (80029d8 <HAL_DMA_Abort_IT+0x28c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_DMA_Abort_IT+0x290>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a79      	ldr	r2, [pc, #484]	; (80029e0 <HAL_DMA_Abort_IT+0x294>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a77      	ldr	r2, [pc, #476]	; (80029e4 <HAL_DMA_Abort_IT+0x298>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0xc8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a76      	ldr	r2, [pc, #472]	; (80029e8 <HAL_DMA_Abort_IT+0x29c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Abort_IT+0xcc>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_DMA_Abort_IT+0xce>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d065      	beq.n	80028ea <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2204      	movs	r2, #4
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a60      	ldr	r2, [pc, #384]	; (80029ac <HAL_DMA_Abort_IT+0x260>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04a      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_DMA_Abort_IT+0x264>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d045      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_DMA_Abort_IT+0x268>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_DMA_Abort_IT+0x26c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d03b      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_DMA_Abort_IT+0x270>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d036      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_DMA_Abort_IT+0x274>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_DMA_Abort_IT+0x278>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d02c      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <HAL_DMA_Abort_IT+0x27c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a54      	ldr	r2, [pc, #336]	; (80029cc <HAL_DMA_Abort_IT+0x280>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_DMA_Abort_IT+0x284>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_DMA_Abort_IT+0x288>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_DMA_Abort_IT+0x28c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4e      	ldr	r2, [pc, #312]	; (80029dc <HAL_DMA_Abort_IT+0x290>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_DMA_Abort_IT+0x294>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_DMA_Abort_IT+0x298>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x17a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_DMA_Abort_IT+0x29c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <HAL_DMA_Abort_IT+0x18c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e147      	b.n	8002b68 <HAL_DMA_Abort_IT+0x41c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e13e      	b.n	8002b68 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020e 	bic.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <HAL_DMA_Abort_IT+0x260>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d04a      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <HAL_DMA_Abort_IT+0x264>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d045      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_DMA_Abort_IT+0x268>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d040      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <HAL_DMA_Abort_IT+0x26c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d03b      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_DMA_Abort_IT+0x270>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d036      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_DMA_Abort_IT+0x274>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_DMA_Abort_IT+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d02c      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_DMA_Abort_IT+0x27c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d027      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_DMA_Abort_IT+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_DMA_Abort_IT+0x284>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01d      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_DMA_Abort_IT+0x288>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d018      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_DMA_Abort_IT+0x28c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_DMA_Abort_IT+0x290>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_DMA_Abort_IT+0x294>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_DMA_Abort_IT+0x298>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_DMA_Abort_IT+0x24e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_DMA_Abort_IT+0x29c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d128      	bne.n	80029ec <HAL_DMA_Abort_IT+0x2a0>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e027      	b.n	80029fc <HAL_DMA_Abort_IT+0x2b0>
 80029ac:	40020010 	.word	0x40020010
 80029b0:	40020028 	.word	0x40020028
 80029b4:	40020040 	.word	0x40020040
 80029b8:	40020058 	.word	0x40020058
 80029bc:	40020070 	.word	0x40020070
 80029c0:	40020088 	.word	0x40020088
 80029c4:	400200a0 	.word	0x400200a0
 80029c8:	400200b8 	.word	0x400200b8
 80029cc:	40020410 	.word	0x40020410
 80029d0:	40020428 	.word	0x40020428
 80029d4:	40020440 	.word	0x40020440
 80029d8:	40020458 	.word	0x40020458
 80029dc:	40020470 	.word	0x40020470
 80029e0:	40020488 	.word	0x40020488
 80029e4:	400204a0 	.word	0x400204a0
 80029e8:	400204b8 	.word	0x400204b8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5c      	ldr	r2, [pc, #368]	; (8002b74 <HAL_DMA_Abort_IT+0x428>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d072      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <HAL_DMA_Abort_IT+0x42c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d06d      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a59      	ldr	r2, [pc, #356]	; (8002b7c <HAL_DMA_Abort_IT+0x430>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d068      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_DMA_Abort_IT+0x434>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d063      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_DMA_Abort_IT+0x438>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d05e      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_DMA_Abort_IT+0x43c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d059      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a53      	ldr	r2, [pc, #332]	; (8002b8c <HAL_DMA_Abort_IT+0x440>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d054      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_DMA_Abort_IT+0x444>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04f      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_DMA_Abort_IT+0x448>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d04a      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_DMA_Abort_IT+0x44c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d045      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4d      	ldr	r2, [pc, #308]	; (8002b9c <HAL_DMA_Abort_IT+0x450>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d040      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ba0 <HAL_DMA_Abort_IT+0x454>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d03b      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <HAL_DMA_Abort_IT+0x458>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d036      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_DMA_Abort_IT+0x45c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d031      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a47      	ldr	r2, [pc, #284]	; (8002bac <HAL_DMA_Abort_IT+0x460>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02c      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_DMA_Abort_IT+0x464>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d027      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a44      	ldr	r2, [pc, #272]	; (8002bb4 <HAL_DMA_Abort_IT+0x468>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d022      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a43      	ldr	r2, [pc, #268]	; (8002bb8 <HAL_DMA_Abort_IT+0x46c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01d      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <HAL_DMA_Abort_IT+0x470>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_DMA_Abort_IT+0x474>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3e      	ldr	r2, [pc, #248]	; (8002bc4 <HAL_DMA_Abort_IT+0x478>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3d      	ldr	r2, [pc, #244]	; (8002bc8 <HAL_DMA_Abort_IT+0x47c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_DMA_Abort_IT+0x480>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_DMA_Abort_IT+0x3a0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <HAL_DMA_Abort_IT+0x484>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_DMA_Abort_IT+0x3a4>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_DMA_Abort_IT+0x3a6>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
 8002bb4:	58025408 	.word	0x58025408
 8002bb8:	5802541c 	.word	0x5802541c
 8002bbc:	58025430 	.word	0x58025430
 8002bc0:	58025444 	.word	0x58025444
 8002bc4:	58025458 	.word	0x58025458
 8002bc8:	5802546c 	.word	0x5802546c
 8002bcc:	58025480 	.word	0x58025480
 8002bd0:	58025494 	.word	0x58025494

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_GPIO_Init+0x234>)
 8002be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002be6:	e194      	b.n	8002f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8186 	beq.w	8002f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d00b      	beq.n	8002c20 <HAL_GPIO_Init+0x4c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c14:	2b11      	cmp	r3, #17
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b12      	cmp	r3, #18
 8002c1e:	d130      	bne.n	8002c82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c56:	2201      	movs	r2, #1
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0201 	and.w	r2, r3, #1
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0xee>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d123      	bne.n	8002d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80e0 	beq.w	8002f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_GPIO_Init+0x238>)
 8002d4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d52:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <HAL_GPIO_Init+0x238>)
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_GPIO_Init+0x238>)
 8002d5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_GPIO_Init+0x23c>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a20      	ldr	r2, [pc, #128]	; (8002e14 <HAL_GPIO_Init+0x240>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d052      	beq.n	8002e3c <HAL_GPIO_Init+0x268>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_GPIO_Init+0x244>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_GPIO_Init+0x22e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_GPIO_Init+0x248>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <HAL_GPIO_Init+0x22a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_GPIO_Init+0x24c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x226>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_GPIO_Init+0x250>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x222>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_GPIO_Init+0x254>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x21e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_GPIO_Init+0x258>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x21a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_GPIO_Init+0x25c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_GPIO_Init+0x260>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x212>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_GPIO_Init+0x264>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x20e>
 8002dde:	2309      	movs	r3, #9
 8002de0:	e02d      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002de2:	230a      	movs	r3, #10
 8002de4:	e02b      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002de6:	2308      	movs	r3, #8
 8002de8:	e029      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e027      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e025      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e023      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e021      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e01f      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e01d      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01b      	b.n	8002e3e <HAL_GPIO_Init+0x26a>
 8002e06:	bf00      	nop
 8002e08:	58000080 	.word	0x58000080
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58000400 	.word	0x58000400
 8002e14:	58020000 	.word	0x58020000
 8002e18:	58020400 	.word	0x58020400
 8002e1c:	58020800 	.word	0x58020800
 8002e20:	58020c00 	.word	0x58020c00
 8002e24:	58021000 	.word	0x58021000
 8002e28:	58021400 	.word	0x58021400
 8002e2c:	58021800 	.word	0x58021800
 8002e30:	58021c00 	.word	0x58021c00
 8002e34:	58022000 	.word	0x58022000
 8002e38:	58022400 	.word	0x58022400
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e4e:	4938      	ldr	r1, [pc, #224]	; (8002f30 <HAL_GPIO_Init+0x35c>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f ae63 	bne.w	8002be8 <HAL_GPIO_Init+0x14>
  }
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	3724      	adds	r7, #36	; 0x24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	58000400 	.word	0x58000400

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d00a      	beq.n	8002f92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e040      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e03e      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002f9a:	491f      	ldr	r1, [pc, #124]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fa2:	f7fe fdad 	bl	8001b00 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fa8:	e009      	b.n	8002fbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002faa:	f7fe fda9 	bl	8001b00 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb8:	d901      	bls.n	8002fbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e028      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d1ee      	bne.n	8002faa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b1e      	cmp	r3, #30
 8002fd0:	d008      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002fd6:	d005      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b1d      	cmp	r3, #29
 8002fdc:	d002      	beq.n	8002fe4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b2d      	cmp	r3, #45	; 0x2d
 8002fe2:	d114      	bne.n	800300e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002fe4:	f7fe fd8c 	bl	8001b00 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fea:	e009      	b.n	8003000 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fec:	f7fe fd88 	bl	8001b00 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffa:	d901      	bls.n	8003000 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_PWREx_ConfigSupply+0xb0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d1ee      	bne.n	8002fec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	58024800 	.word	0x58024800

0800301c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e3d7      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80b3 	beq.w	80031a2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003046:	4b8e      	ldr	r3, [pc, #568]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b10      	cmp	r3, #16
 8003050:	d007      	beq.n	8003062 <HAL_RCC_OscConfig+0x46>
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b18      	cmp	r3, #24
 8003056:	d112      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d10d      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003062:	4b87      	ldr	r3, [pc, #540]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8098 	beq.w	80031a0 <HAL_RCC_OscConfig+0x184>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 8093 	bne.w	80031a0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e3af      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x7a>
 8003088:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e058      	b.n	8003148 <HAL_RCC_OscConfig+0x12c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0xa8>
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a74      	ldr	r2, [pc, #464]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e041      	b.n	8003148 <HAL_RCC_OscConfig+0x12c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e029      	b.n	8003148 <HAL_RCC_OscConfig+0x12c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80030fc:	d112      	bne.n	8003124 <HAL_RCC_OscConfig+0x108>
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5f      	ldr	r2, [pc, #380]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a59      	ldr	r2, [pc, #356]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e011      	b.n	8003148 <HAL_RCC_OscConfig+0x12c>
 8003124:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a4f      	ldr	r2, [pc, #316]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fcd6 	bl	8001b00 <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fcd2 	bl	8001b00 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e339      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800316a:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x13c>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fcc2 	bl	8001b00 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fcbe 	bl	8001b00 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e325      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x164>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d070      	beq.n	8003290 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_RCC_OscConfig+0x1b8>
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d11b      	bne.n	8003202 <HAL_RCC_OscConfig+0x1e6>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d116      	bne.n	8003202 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x1d0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e2f8      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4921      	ldr	r1, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	e046      	b.n	8003290 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d026      	beq.n	8003258 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0219 	bic.w	r2, r3, #25
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	491a      	ldr	r1, [pc, #104]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fc70 	bl	8001b00 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003224:	f7fe fc6c 	bl	8001b00 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e2d3      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	490b      	ldr	r1, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e01b      	b.n	8003290 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_RCC_OscConfig+0x264>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fc4c 	bl	8001b00 <HAL_GetTick>
 8003268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326c:	f7fe fc48 	bl	8001b00 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d904      	bls.n	8003284 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e2af      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003284:	4b99      	ldr	r3, [pc, #612]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ed      	bne.n	800326c <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d06a      	beq.n	8003372 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329c:	4b93      	ldr	r3, [pc, #588]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032a6:	4b91      	ldr	r3, [pc, #580]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d007      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2a6>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b18      	cmp	r3, #24
 80032b6:	d11b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032c2:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x2be>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b80      	cmp	r3, #128	; 0x80
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e281      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032da:	4b84      	ldr	r3, [pc, #528]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4980      	ldr	r1, [pc, #512]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ee:	e040      	b.n	8003372 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032f8:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7b      	ldr	r2, [pc, #492]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fbfc 	bl	8001b00 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800330c:	f7fe fbf8 	bl	8001b00 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e25f      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800331e:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	496c      	ldr	r1, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	60cb      	str	r3, [r1, #12]
 800333e:	e018      	b.n	8003372 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a69      	ldr	r2, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fbd8 	bl	8001b00 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003354:	f7fe fbd4 	bl	8001b00 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e23b      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d036      	beq.n	80033ec <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d019      	beq.n	80033ba <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fbb5 	bl	8001b00 <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe fbb1 	bl	8001b00 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e218      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x37e>
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe fb9b 	bl	8001b00 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fe fb97 	bl	8001b00 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1fe      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d036      	beq.n	8003466 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a39      	ldr	r2, [pc, #228]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800340a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800340c:	f7fe fb78 	bl	8001b00 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003414:	f7fe fb74 	bl	8001b00 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1db      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x3f8>
 8003432:	e018      	b.n	8003466 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800343a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800343e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003440:	f7fe fb5e 	bl	8001b00 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003448:	f7fe fb5a 	bl	8001b00 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1c1      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80af 	beq.w	80035d2 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003480:	f7fe fb3e 	bl	8001b00 <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe fb3a 	bl	8001b00 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1a1      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x4a0>
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a0e      	ldr	r2, [pc, #56]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	e05b      	b.n	8003574 <HAL_RCC_OscConfig+0x558>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d117      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a08      	ldr	r2, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a05      	ldr	r2, [pc, #20]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a02      	ldr	r2, [pc, #8]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	e044      	b.n	8003574 <HAL_RCC_OscConfig+0x558>
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
 80034f0:	58024800 	.word	0x58024800
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d112      	bne.n	8003522 <HAL_RCC_OscConfig+0x506>
 80034fc:	4b95      	ldr	r3, [pc, #596]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a94      	ldr	r2, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a91      	ldr	r2, [pc, #580]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a8e      	ldr	r2, [pc, #568]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	e028      	b.n	8003574 <HAL_RCC_OscConfig+0x558>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b85      	cmp	r3, #133	; 0x85
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x534>
 800352a:	4b8a      	ldr	r3, [pc, #552]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a89      	ldr	r2, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	4b87      	ldr	r3, [pc, #540]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a86      	ldr	r2, [pc, #536]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b84      	ldr	r3, [pc, #528]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a83      	ldr	r2, [pc, #524]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	e011      	b.n	8003574 <HAL_RCC_OscConfig+0x558>
 8003550:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
 800355c:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a79      	ldr	r2, [pc, #484]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fac0 	bl	8001b00 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fabc 	bl	8001b00 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e121      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCC_OscConfig+0x568>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fe faaa 	bl	8001b00 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe faa6 	bl	8001b00 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e10b      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ee      	bne.n	80035b0 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8100 	beq.w	80037dc <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035dc:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e4:	2b18      	cmp	r3, #24
 80035e6:	f000 80bb 	beq.w	8003760 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	f040 8095 	bne.w	800371e <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a56      	ldr	r2, [pc, #344]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fa7e 	bl	8001b00 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fa7a 	bl	8001b00 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0e1      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003626:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_RCC_OscConfig+0x73c>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	430a      	orrs	r2, r1
 800363a:	4946      	ldr	r1, [pc, #280]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800363c:	4313      	orrs	r3, r2
 800363e:	628b      	str	r3, [r1, #40]	; 0x28
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	3b01      	subs	r3, #1
 8003646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	3b01      	subs	r3, #1
 8003650:	025b      	lsls	r3, r3, #9
 8003652:	b29b      	uxth	r3, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	3b01      	subs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	3b01      	subs	r3, #1
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003670:	4938      	ldr	r1, [pc, #224]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	4a36      	ldr	r2, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCC_OscConfig+0x740>)
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800368e:	00d2      	lsls	r2, r2, #3
 8003690:	4930      	ldr	r1, [pc, #192]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003692:	4313      	orrs	r3, r2
 8003694:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f023 020c 	bic.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	492c      	ldr	r1, [pc, #176]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f023 0202 	bic.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	4927      	ldr	r1, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 80036f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe fa03 	bl	8001b00 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fe f9ff 	bl	8001b00 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e066      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x6e2>
 800371c:	e05e      	b.n	80037dc <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe f9e9 	bl	8001b00 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe f9e5 	bl	8001b00 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e04c      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_OscConfig+0x738>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x716>
 8003750:	e044      	b.n	80037dc <HAL_RCC_OscConfig+0x7c0>
 8003752:	bf00      	nop
 8003754:	58024400 	.word	0x58024400
 8003758:	fffffc0c 	.word	0xfffffc0c
 800375c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b01      	cmp	r3, #1
 8003772:	d031      	beq.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f003 0203 	and.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d12a      	bne.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d122      	bne.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d11a      	bne.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	0a5b      	lsrs	r3, r3, #9
 80037a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d111      	bne.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d108      	bne.n	80037d8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3730      	adds	r7, #48	; 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	58024400 	.word	0x58024400

080037ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e19c      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	4985      	ldr	r1, [pc, #532]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e184      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003848:	429a      	cmp	r2, r3
 800384a:	d908      	bls.n	800385e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800384c:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4975      	ldr	r1, [pc, #468]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800385a:	4313      	orrs	r3, r2
 800385c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003876:	429a      	cmp	r2, r3
 8003878:	d908      	bls.n	800388c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	496a      	ldr	r1, [pc, #424]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003888:	4313      	orrs	r3, r2
 800388a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	4b64      	ldr	r3, [pc, #400]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	495e      	ldr	r1, [pc, #376]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d908      	bls.n	80038e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038d6:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4953      	ldr	r1, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f023 020f 	bic.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4947      	ldr	r1, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003912:	4313      	orrs	r3, r2
 8003914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d055      	beq.n	80039ce <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4940      	ldr	r1, [pc, #256]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003930:	4313      	orrs	r3, r2
 8003932:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d107      	bne.n	800394c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800393c:	4b3c      	ldr	r3, [pc, #240]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d121      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0f6      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d115      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0ea      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800396c:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0de      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d6      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4925      	ldr	r1, [pc, #148]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe f8af 	bl	8001b00 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a6:	f7fe f8ab 	bl	8001b00 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0be      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d1eb      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d010      	beq.n	80039fc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d208      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x244>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d214      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 020f 	bic.w	r2, r3, #15
 8003a12:	4906      	ldr	r1, [pc, #24]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e086      	b.n	8003b3a <HAL_RCC_ClockConfig+0x34e>
 8003a2c:	52002000 	.word	0x52002000
 8003a30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d208      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a50:	4b3c      	ldr	r3, [pc, #240]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4939      	ldr	r1, [pc, #228]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d208      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a7e:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	492e      	ldr	r1, [pc, #184]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d208      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4922      	ldr	r1, [pc, #136]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d208      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4917      	ldr	r1, [pc, #92]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003aec:	f000 f834 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	4912      	ldr	r1, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x35c>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x358>)
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_RCC_ClockConfig+0x35c>)
 8003b14:	5cd3      	ldrb	r3, [r2, r3]
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <HAL_RCC_ClockConfig+0x360>)
 8003b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x364>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x368>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd ff9c 	bl	8001a6c <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	0800845c 	.word	0x0800845c
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000008 	.word	0x20000008

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5e:	4bb3      	ldr	r3, [pc, #716]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	f200 8155 	bhi.w	8003e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003e17 	.word	0x08003e17
 8003b7c:	08003e17 	.word	0x08003e17
 8003b80:	08003e17 	.word	0x08003e17
 8003b84:	08003e17 	.word	0x08003e17
 8003b88:	08003e17 	.word	0x08003e17
 8003b8c:	08003e17 	.word	0x08003e17
 8003b90:	08003e17 	.word	0x08003e17
 8003b94:	08003bff 	.word	0x08003bff
 8003b98:	08003e17 	.word	0x08003e17
 8003b9c:	08003e17 	.word	0x08003e17
 8003ba0:	08003e17 	.word	0x08003e17
 8003ba4:	08003e17 	.word	0x08003e17
 8003ba8:	08003e17 	.word	0x08003e17
 8003bac:	08003e17 	.word	0x08003e17
 8003bb0:	08003e17 	.word	0x08003e17
 8003bb4:	08003c05 	.word	0x08003c05
 8003bb8:	08003e17 	.word	0x08003e17
 8003bbc:	08003e17 	.word	0x08003e17
 8003bc0:	08003e17 	.word	0x08003e17
 8003bc4:	08003e17 	.word	0x08003e17
 8003bc8:	08003e17 	.word	0x08003e17
 8003bcc:	08003e17 	.word	0x08003e17
 8003bd0:	08003e17 	.word	0x08003e17
 8003bd4:	08003c0b 	.word	0x08003c0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd8:	4b94      	ldr	r3, [pc, #592]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d009      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003be4:	4b91      	ldr	r3, [pc, #580]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	08db      	lsrs	r3, r3, #3
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bf6:	e111      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bf8:	4b8d      	ldr	r3, [pc, #564]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bfa:	61bb      	str	r3, [r7, #24]
    break;
 8003bfc:	e10e      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bfe:	4b8d      	ldr	r3, [pc, #564]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c00:	61bb      	str	r3, [r7, #24]
    break;
 8003c02:	e10b      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c04:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c06:	61bb      	str	r3, [r7, #24]
    break;
 8003c08:	e108      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c0a:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c14:	4b85      	ldr	r3, [pc, #532]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c20:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c2a:	4b80      	ldr	r3, [pc, #512]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80e1 	beq.w	8003e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f000 8083 	beq.w	8003d5c <HAL_RCC_GetSysClockFreq+0x204>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	f200 80a1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x248>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x114>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d056      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c6a:	e099      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c78:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	4a6b      	ldr	r2, [pc, #428]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca2:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cd2:	e087      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d16:	e065      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5a:	e043      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e021      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dee:	3301      	adds	r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e08:	ee17 3a90 	vmov	r3, s15
 8003e0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e0e:	e005      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
    break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e18:	61bb      	str	r3, [r7, #24]
    break;
 8003e1a:	bf00      	nop
  }

  return sysclockfreq;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3724      	adds	r7, #36	; 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	03d09000 	.word	0x03d09000
 8003e34:	003d0900 	.word	0x003d0900
 8003e38:	007a1200 	.word	0x007a1200
 8003e3c:	46000000 	.word	0x46000000
 8003e40:	4c742400 	.word	0x4c742400
 8003e44:	4a742400 	.word	0x4a742400
 8003e48:	4af42400 	.word	0x4af42400

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003e52:	f7ff fe81 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	490f      	ldr	r1, [pc, #60]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e8a:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	0800845c 	.word	0x0800845c
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003eb0:	f7ff ffcc 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	0800845c 	.word	0x0800845c

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003edc:	f7ff ffb6 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	58024400 	.word	0x58024400
 8003f00:	0800845c 	.word	0x0800845c

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d03f      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f28:	d02a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f2e:	d824      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f34:	d018      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3a:	d81e      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f44:	d007      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f46:	e018      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4ba6      	ldr	r3, [pc, #664]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4aa5      	ldr	r2, [pc, #660]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f54:	e015      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 f99b 	bl	8005298 <RCCEx_PLL2_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f66:	e00c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fa44 	bl	80053fc <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f94:	4993      	ldr	r1, [pc, #588]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	650b      	str	r3, [r1, #80]	; 0x50
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d03d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d826      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fdf 	.word	0x08003fdf
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b84      	ldr	r3, [pc, #528]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a83      	ldr	r2, [pc, #524]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fdc:	e015      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f957 	bl	8005298 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fee:	e00c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fa00 	bl	80053fc <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
      break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b74      	ldr	r3, [pc, #464]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	f023 0207 	bic.w	r2, r3, #7
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	4971      	ldr	r1, [pc, #452]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	650b      	str	r3, [r1, #80]	; 0x50
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d04a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800403c:	d031      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800403e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004042:	d82b      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004048:	d02d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d825      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004050:	2bc0      	cmp	r3, #192	; 0xc0
 8004052:	d02a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004054:	2bc0      	cmp	r3, #192	; 0xc0
 8004056:	d821      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d016      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800405c:	2b80      	cmp	r3, #128	; 0x80
 800405e:	d81d      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d007      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004068:	e018      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a5d      	ldr	r2, [pc, #372]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004076:	e019      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f90a 	bl	8005298 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004088:	e010      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3324      	adds	r3, #36	; 0x24
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f001 f9b3 	bl	80053fc <RCCEx_PLL3_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800409a:	e007      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
      break;
 80040a0:	e004      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80040b2:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4949      	ldr	r1, [pc, #292]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	650b      	str	r3, [r1, #80]	; 0x50
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d04f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040de:	d036      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80040e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040e4:	d830      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80040e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ea:	d032      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f0:	d82a      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80040f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040f6:	d02e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80040f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040fc:	d824      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d018      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d81e      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800410e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004112:	d007      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004114:	e018      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	4a32      	ldr	r2, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004122:	e019      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f8b4 	bl	8005298 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004134:	e010      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3324      	adds	r3, #36	; 0x24
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f001 f95d 	bl	80053fc <RCCEx_PLL3_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004146:	e007      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	491e      	ldr	r1, [pc, #120]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	650b      	str	r3, [r1, #80]	; 0x50
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d034      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d01c      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800418a:	2b30      	cmp	r3, #48	; 0x30
 800418c:	d817      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800418e:	2b20      	cmp	r3, #32
 8004190:	d00c      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004192:	2b20      	cmp	r3, #32
 8004194:	d813      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800419a:	2b10      	cmp	r3, #16
 800419c:	d10f      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041aa:	e00e      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f870 	bl	8005298 <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041bc:	e005      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80041c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	4901      	ldr	r1, [pc, #4]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80041e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d047      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004200:	d030      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004206:	d82a      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800420c:	d02c      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800420e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004212:	d824      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004218:	d018      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421e:	d81e      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d007      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800422a:	e018      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422c:	4bb0      	ldr	r3, [pc, #704]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	4aaf      	ldr	r2, [pc, #700]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004238:	e017      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f829 	bl	8005298 <RCCEx_PLL2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800424a:	e00e      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f8d2 	bl	80053fc <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800425c:	e005      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004270:	4b9f      	ldr	r3, [pc, #636]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427c:	499c      	ldr	r1, [pc, #624]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800427e:	4313      	orrs	r3, r2
 8004280:	650b      	str	r3, [r1, #80]	; 0x50
 8004282:	e001      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d049      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429c:	d02e      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800429e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a2:	d828      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042a8:	d02a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80042aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ae:	d822      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042b4:	d026      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80042b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ba:	d81c      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c0:	d010      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80042c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c6:	d816      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d111      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 ffdd 	bl	8005298 <RCCEx_PLL2_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042e2:	e012      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3324      	adds	r3, #36	; 0x24
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f886 	bl	80053fc <RCCEx_PLL3_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80042f4:	e009      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	75fb      	strb	r3, [r7, #23]
      break;
 80042fa:	e006      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004310:	4b77      	ldr	r3, [pc, #476]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431c:	4974      	ldr	r1, [pc, #464]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800431e:	4313      	orrs	r3, r2
 8004320:	650b      	str	r3, [r1, #80]	; 0x50
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d053      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800433a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800433e:	d034      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004340:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004344:	d82e      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434a:	d030      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004350:	d828      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d02c      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d822      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800435e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004362:	d028      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004368:	d81c      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800436a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436e:	d010      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d816      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01f      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800437a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437e:	d111      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ff86 	bl	8005298 <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004390:	e014      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f001 f82f 	bl	80053fc <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043a2:	e00b      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
      break;
 80043a8:	e008      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043aa:	bf00      	nop
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043ae:	bf00      	nop
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c2:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d0:	4947      	ldr	r1, [pc, #284]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	658b      	str	r3, [r1, #88]	; 0x58
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f0:	d00e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80043f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f6:	d814      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004400:	d10f      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a3a      	ldr	r2, [pc, #232]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800440e:	e00c      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff3e 	bl	8005298 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	492c      	ldr	r1, [pc, #176]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800443e:	4313      	orrs	r3, r2
 8004440:	650b      	str	r3, [r1, #80]	; 0x50
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d032      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2b03      	cmp	r3, #3
 800445a:	d81b      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	0800449b 	.word	0x0800449b
 8004468:	08004475 	.word	0x08004475
 800446c:	08004483 	.word	0x08004483
 8004470:	0800449b 	.word	0x0800449b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004480:	e00c      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 ff05 	bl	8005298 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004492:	e003      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800449a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	4910      	ldr	r1, [pc, #64]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044b4:	e001      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 808a 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d4:	f7fd fb14 	bl	8001b00 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044da:	e00d      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fd fb10 	bl	8001b00 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d906      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	75fb      	strb	r3, [r7, #23]
        break;
 80044ee:	e009      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80044f0:	58024400 	.word	0x58024400
 80044f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f8:	4bba      	ldr	r3, [pc, #744]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0eb      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d166      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800450a:	4bb7      	ldr	r3, [pc, #732]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800450c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004514:	4053      	eors	r3, r2
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451e:	4bb2      	ldr	r3, [pc, #712]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004528:	4baf      	ldr	r3, [pc, #700]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4aae      	ldr	r2, [pc, #696]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004534:	4bac      	ldr	r3, [pc, #688]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4aab      	ldr	r2, [pc, #684]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004540:	4aa9      	ldr	r2, [pc, #676]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d115      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fad5 	bl	8001b00 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004558:	e00b      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd fad1 	bl	8001b00 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d902      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	75fb      	strb	r3, [r7, #23]
            break;
 8004570:	e005      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004572:	4b9d      	ldr	r3, [pc, #628]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ed      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d126      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004592:	d10d      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004594:	4b94      	ldr	r3, [pc, #592]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045a2:	0919      	lsrs	r1, r3, #4
 80045a4:	4b91      	ldr	r3, [pc, #580]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	498f      	ldr	r1, [pc, #572]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
 80045ae:	e005      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80045b0:	4b8d      	ldr	r3, [pc, #564]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	4a8c      	ldr	r2, [pc, #560]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045ba:	6113      	str	r3, [r2, #16]
 80045bc:	4b8a      	ldr	r3, [pc, #552]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ca:	4987      	ldr	r1, [pc, #540]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	670b      	str	r3, [r1, #112]	; 0x70
 80045d0:	e004      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	75bb      	strb	r3, [r7, #22]
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d07f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ee:	2b28      	cmp	r3, #40	; 0x28
 80045f0:	d866      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	080046c7 	.word	0x080046c7
 80045fc:	080046c1 	.word	0x080046c1
 8004600:	080046c1 	.word	0x080046c1
 8004604:	080046c1 	.word	0x080046c1
 8004608:	080046c1 	.word	0x080046c1
 800460c:	080046c1 	.word	0x080046c1
 8004610:	080046c1 	.word	0x080046c1
 8004614:	080046c1 	.word	0x080046c1
 8004618:	0800469d 	.word	0x0800469d
 800461c:	080046c1 	.word	0x080046c1
 8004620:	080046c1 	.word	0x080046c1
 8004624:	080046c1 	.word	0x080046c1
 8004628:	080046c1 	.word	0x080046c1
 800462c:	080046c1 	.word	0x080046c1
 8004630:	080046c1 	.word	0x080046c1
 8004634:	080046c1 	.word	0x080046c1
 8004638:	080046af 	.word	0x080046af
 800463c:	080046c1 	.word	0x080046c1
 8004640:	080046c1 	.word	0x080046c1
 8004644:	080046c1 	.word	0x080046c1
 8004648:	080046c1 	.word	0x080046c1
 800464c:	080046c1 	.word	0x080046c1
 8004650:	080046c1 	.word	0x080046c1
 8004654:	080046c1 	.word	0x080046c1
 8004658:	080046c7 	.word	0x080046c7
 800465c:	080046c1 	.word	0x080046c1
 8004660:	080046c1 	.word	0x080046c1
 8004664:	080046c1 	.word	0x080046c1
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046c1 	.word	0x080046c1
 8004670:	080046c1 	.word	0x080046c1
 8004674:	080046c1 	.word	0x080046c1
 8004678:	080046c7 	.word	0x080046c7
 800467c:	080046c1 	.word	0x080046c1
 8004680:	080046c1 	.word	0x080046c1
 8004684:	080046c1 	.word	0x080046c1
 8004688:	080046c1 	.word	0x080046c1
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046c1 	.word	0x080046c1
 8004694:	080046c1 	.word	0x080046c1
 8004698:	080046c7 	.word	0x080046c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fdf8 	bl	8005298 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046ac:	e00c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fea1 	bl	80053fc <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80046c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046ce:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046dc:	4942      	ldr	r1, [pc, #264]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	654b      	str	r3, [r1, #84]	; 0x54
 80046e2:	e001      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d038      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d821      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004747 	.word	0x08004747
 8004708:	0800471d 	.word	0x0800471d
 800470c:	0800472f 	.word	0x0800472f
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fdb8 	bl	8005298 <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800472c:	e00c      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fe61 	bl	80053fc <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
      break;
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800474e:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	4923      	ldr	r1, [pc, #140]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	654b      	str	r3, [r1, #84]	; 0x54
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d040      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004778:	2b05      	cmp	r3, #5
 800477a:	d821      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047c7 	.word	0x080047c7
 8004788:	0800479d 	.word	0x0800479d
 800478c:	080047af 	.word	0x080047af
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047c7 	.word	0x080047c7
 8004798:	080047c7 	.word	0x080047c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fd78 	bl	8005298 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fe21 	bl	80053fc <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	e000      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80047c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d110      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047dc:	4902      	ldr	r1, [pc, #8]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	658b      	str	r3, [r1, #88]	; 0x58
 80047e2:	e007      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80047e4:	58024800 	.word	0x58024800
 80047e8:	58024400 	.word	0x58024400
 80047ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d04b      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800480a:	d02e      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800480c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004810:	d828      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d02a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d822      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800481e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004822:	d026      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004828:	d81c      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800482a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482e:	d010      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d816      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01d      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800483a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483e:	d111      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fd26 	bl	8005298 <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004850:	e012      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3324      	adds	r3, #36	; 0x24
 8004856:	2102      	movs	r1, #2
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fdcf 	bl	80053fc <RCCEx_PLL3_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004862:	e009      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
      break;
 8004868:	e006      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800486a:	bf00      	nop
 800486c:	e004      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487e:	4bb3      	ldr	r3, [pc, #716]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488c:	49af      	ldr	r1, [pc, #700]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800488e:	4313      	orrs	r3, r2
 8004890:	654b      	str	r3, [r1, #84]	; 0x54
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d04b      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048ae:	d02e      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80048b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048b4:	d828      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d02a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d822      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c6:	d026      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048cc:	d81c      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	d010      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	d816      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01d      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d111      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fcd4 	bl	8005298 <RCCEx_PLL2_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048f4:	e012      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3324      	adds	r3, #36	; 0x24
 80048fa:	2102      	movs	r1, #2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fd7d 	bl	80053fc <RCCEx_PLL3_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004906:	e009      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	75fb      	strb	r3, [r7, #23]
      break;
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800490e:	bf00      	nop
 8004910:	e004      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800491a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004922:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004930:	4986      	ldr	r1, [pc, #536]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004932:	4313      	orrs	r3, r2
 8004934:	658b      	str	r3, [r1, #88]	; 0x58
 8004936:	e001      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04b      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800494e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004952:	d02e      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004954:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004958:	d828      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d02a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004964:	d822      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004966:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800496a:	d026      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800496c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004970:	d81c      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004976:	d010      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497c:	d816      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01d      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004986:	d111      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fc82 	bl	8005298 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004998:	e012      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3324      	adds	r3, #36	; 0x24
 800499e:	2102      	movs	r1, #2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd2b 	bl	80053fc <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049aa:	e009      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
      break;
 80049b0:	e006      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049b2:	bf00      	nop
 80049b4:	e004      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049b6:	bf00      	nop
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049ba:	bf00      	nop
 80049bc:	e000      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049d4:	495d      	ldr	r1, [pc, #372]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	658b      	str	r3, [r1, #88]	; 0x58
 80049da:	e001      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d10a      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	2102      	movs	r1, #2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fcfc 	bl	80053fc <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a0e:	4b4f      	ldr	r3, [pc, #316]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	494b      	ldr	r1, [pc, #300]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d10a      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3324      	adds	r3, #36	; 0x24
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fcdb 	bl	80053fc <RCCEx_PLL3_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a5e:	493b      	ldr	r1, [pc, #236]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d034      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d817      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a8c:	e011      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fbff 	bl	8005298 <RCCEx_PLL2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a9e:	e00c      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3324      	adds	r3, #36	; 0x24
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fca8 	bl	80053fc <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ab0:	e003      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ace:	491f      	ldr	r1, [pc, #124]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad4:	e001      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004af0:	d01c      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004af6:	d816      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afc:	d003      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b02:	d007      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004b04:	e00f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b12:	e00c      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc6e 	bl	80053fc <RCCEx_PLL3_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b42:	4902      	ldr	r1, [pc, #8]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	654b      	str	r3, [r1, #84]	; 0x54
 8004b48:	e004      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d029      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6c:	d007      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004b6e:	e00f      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b70:	4b69      	ldr	r3, [pc, #420]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4a68      	ldr	r2, [pc, #416]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b7c:	e00b      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2102      	movs	r1, #2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fb87 	bl	8005298 <RCCEx_PLL2_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b9c:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	495b      	ldr	r1, [pc, #364]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bae:	e001      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fc18 	bl	80053fc <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d032      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bec:	d017      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf2:	d811      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf8:	d013      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfe:	d80b      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c08:	d106      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a42      	ldr	r2, [pc, #264]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c16:	e007      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	e004      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c2e:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3c:	4936      	ldr	r1, [pc, #216]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	654b      	str	r3, [r1, #84]	; 0x54
 8004c42:	e001      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c60:	492d      	ldr	r1, [pc, #180]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7e:	4926      	ldr	r1, [pc, #152]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	491e      	ldr	r1, [pc, #120]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb8:	6113      	str	r3, [r2, #16]
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cc4:	4914      	ldr	r1, [pc, #80]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da08      	bge.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	490e      	ldr	r1, [pc, #56]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	4906      	ldr	r1, [pc, #24]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d04:	7dbb      	ldrb	r3, [r7, #22]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	58024400 	.word	0x58024400

08004d1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004d20:	f7ff f894 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	; (8004d44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58024400 	.word	0x58024400
 8004d44:	0800845c 	.word	0x0800845c

08004d48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d50:	4ba1      	ldr	r3, [pc, #644]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d5a:	4b9f      	ldr	r3, [pc, #636]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	0b1b      	lsrs	r3, r3, #12
 8004d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d66:	4b9c      	ldr	r3, [pc, #624]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d72:	4b99      	ldr	r3, [pc, #612]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8111 	beq.w	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f200 80a1 	bhi.w	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d056      	beq.n	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004db2:	e099      	b.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db4:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02d      	beq.n	8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dc0:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	4a84      	ldr	r2, [pc, #528]	; (8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e1a:	e087      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5e:	e065      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea2:	e043      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee6:	e021      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 2a90 	vmov	r2, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fae:	ee17 2a90 	vmov	r2, s15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	; 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	03d09000 	.word	0x03d09000
 8004fe0:	46000000 	.word	0x46000000
 8004fe4:	4c742400 	.word	0x4c742400
 8004fe8:	4a742400 	.word	0x4a742400
 8004fec:	4af42400 	.word	0x4af42400

08004ff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005002:	4b9f      	ldr	r3, [pc, #636]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	0d1b      	lsrs	r3, r3, #20
 8005008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800500e:	4b9c      	ldr	r3, [pc, #624]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800501a:	4b99      	ldr	r3, [pc, #612]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8111 	beq.w	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f000 8083 	beq.w	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b02      	cmp	r3, #2
 800504a:	f200 80a1 	bhi.w	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d056      	beq.n	8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800505a:	e099      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505c:	4b88      	ldr	r3, [pc, #544]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02d      	beq.n	80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005068:	4b85      	ldr	r3, [pc, #532]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	4a84      	ldr	r2, [pc, #528]	; (8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b7b      	ldr	r3, [pc, #492]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050c2:	e087      	b.n	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800528c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005106:	e065      	b.n	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b59      	ldr	r3, [pc, #356]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514a:	e043      	b.n	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005294 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b48      	ldr	r3, [pc, #288]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518e:	e021      	b.n	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	0a5b      	lsrs	r3, r3, #9
 80051da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fa:	ee17 2a90 	vmov	r2, s15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005202:	4b1f      	ldr	r3, [pc, #124]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005228:	ee17 2a90 	vmov	r2, s15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800525e:	e008      	b.n	8005272 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
}
 8005272:	bf00      	nop
 8005274:	3724      	adds	r7, #36	; 0x24
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
 8005284:	03d09000 	.word	0x03d09000
 8005288:	46000000 	.word	0x46000000
 800528c:	4c742400 	.word	0x4c742400
 8005290:	4a742400 	.word	0x4a742400
 8005294:	4af42400 	.word	0x4af42400

08005298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a6:	4b53      	ldr	r3, [pc, #332]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d101      	bne.n	80052b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e099      	b.n	80053ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052b6:	4b4f      	ldr	r3, [pc, #316]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4e      	ldr	r2, [pc, #312]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c2:	f7fc fc1d 	bl	8001b00 <HAL_GetTick>
 80052c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052c8:	e008      	b.n	80052dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052ca:	f7fc fc19 	bl	8001b00 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e086      	b.n	80053ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052dc:	4b45      	ldr	r3, [pc, #276]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	493f      	ldr	r1, [pc, #252]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	628b      	str	r3, [r1, #40]	; 0x28
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	3b01      	subs	r3, #1
 8005302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	3b01      	subs	r3, #1
 800530c:	025b      	lsls	r3, r3, #9
 800530e:	b29b      	uxth	r3, r3
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	3b01      	subs	r3, #1
 8005326:	061b      	lsls	r3, r3, #24
 8005328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800532c:	4931      	ldr	r1, [pc, #196]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005332:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	492d      	ldr	r1, [pc, #180]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005344:	4b2b      	ldr	r3, [pc, #172]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f023 0220 	bic.w	r2, r3, #32
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	4928      	ldr	r1, [pc, #160]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <RCCEx_PLL2_Config+0x160>)
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	69d2      	ldr	r2, [r2, #28]
 800536e:	00d2      	lsls	r2, r2, #3
 8005370:	4920      	ldr	r1, [pc, #128]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800537c:	f043 0310 	orr.w	r3, r3, #16
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005394:	e00f      	b.n	80053b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d106      	bne.n	80053aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800539c:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053a8:	e005      	b.n	80053b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a0e      	ldr	r2, [pc, #56]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fc fb9d 	bl	8001b00 <HAL_GetTick>
 80053c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053c8:	e008      	b.n	80053dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053ca:	f7fc fb99 	bl	8001b00 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e006      	b.n	80053ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <RCCEx_PLL2_Config+0x15c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	58024400 	.word	0x58024400
 80053f8:	ffff0007 	.word	0xffff0007

080053fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800540a:	4b53      	ldr	r3, [pc, #332]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d101      	bne.n	800541a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e099      	b.n	800554e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800541a:	4b4f      	ldr	r3, [pc, #316]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4e      	ldr	r2, [pc, #312]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fc fb6b 	bl	8001b00 <HAL_GetTick>
 800542a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800542c:	e008      	b.n	8005440 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800542e:	f7fc fb67 	bl	8001b00 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e086      	b.n	800554e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800544c:	4b42      	ldr	r3, [pc, #264]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	051b      	lsls	r3, r3, #20
 800545a:	493f      	ldr	r1, [pc, #252]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	628b      	str	r3, [r1, #40]	; 0x28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	3b01      	subs	r3, #1
 8005466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	3b01      	subs	r3, #1
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	b29b      	uxth	r3, r3
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	3b01      	subs	r3, #1
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005490:	4931      	ldr	r1, [pc, #196]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005496:	4b30      	ldr	r3, [pc, #192]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	492d      	ldr	r1, [pc, #180]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4928      	ldr	r1, [pc, #160]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054c6:	4b24      	ldr	r3, [pc, #144]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <RCCEx_PLL3_Config+0x160>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	69d2      	ldr	r2, [r2, #28]
 80054d2:	00d2      	lsls	r2, r2, #3
 80054d4:	4920      	ldr	r1, [pc, #128]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054f8:	e00f      	b.n	800551a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d106      	bne.n	800550e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005500:	4b15      	ldr	r3, [pc, #84]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	4a14      	ldr	r2, [pc, #80]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800550a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800550c:	e005      	b.n	800551a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a0e      	ldr	r2, [pc, #56]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fc faeb 	bl	8001b00 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800552c:	e008      	b.n	8005540 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800552e:	f7fc fae7 	bl	8001b00 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <RCCEx_PLL3_Config+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	ffff0007 	.word	0xffff0007

08005560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e049      	b.n	8005606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb ffd6 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f000 f9ee 	bl	8005980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d001      	beq.n	8005628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e04f      	b.n	80056c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01d      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d018      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_Base_Start_IT+0x76>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d115      	bne.n	80056b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <HAL_TIM_Base_Start_IT+0xdc>)
 800568e:	4013      	ands	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d015      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569e:	d011      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	e008      	b.n	80056c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e000      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40001800 	.word	0x40001800
 80056ec:	00010007 	.word	0x00010007

080056f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0202 	mvn.w	r2, #2
 800571c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f905 	bl	8005942 <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8f7 	bl	800592e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f908 	bl	8005956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0204 	mvn.w	r2, #4
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8db 	bl	8005942 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8cd 	bl	800592e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8de 	bl	8005956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0208 	mvn.w	r2, #8
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8b1 	bl	8005942 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8a3 	bl	800592e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8b4 	bl	8005956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d122      	bne.n	8005848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b10      	cmp	r3, #16
 800580e:	d11b      	bne.n	8005848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0210 	mvn.w	r2, #16
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2208      	movs	r2, #8
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f887 	bl	8005942 <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f879 	bl	800592e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f88a 	bl	8005956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10e      	bne.n	8005874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0201 	mvn.w	r2, #1
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fb f88a 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d10e      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f914 	bl	8005ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b80      	cmp	r3, #128	; 0x80
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f907 	bl	8005adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d10e      	bne.n	80058fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f838 	bl	800596a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b20      	cmp	r3, #32
 8005906:	d10e      	bne.n	8005926 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d107      	bne.n	8005926 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0220 	mvn.w	r2, #32
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8c7 	bl	8005ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a40      	ldr	r2, [pc, #256]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599e:	d00f      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <TIM_Base_SetConfig+0x118>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3c      	ldr	r2, [pc, #240]	; (8005a9c <TIM_Base_SetConfig+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3b      	ldr	r2, [pc, #236]	; (8005aa0 <TIM_Base_SetConfig+0x120>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3a      	ldr	r2, [pc, #232]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d108      	bne.n	80059d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2f      	ldr	r2, [pc, #188]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <TIM_Base_SetConfig+0x118>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2b      	ldr	r2, [pc, #172]	; (8005a9c <TIM_Base_SetConfig+0x11c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2a      	ldr	r2, [pc, #168]	; (8005aa0 <TIM_Base_SetConfig+0x120>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a29      	ldr	r2, [pc, #164]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <TIM_Base_SetConfig+0x128>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a27      	ldr	r2, [pc, #156]	; (8005aac <TIM_Base_SetConfig+0x12c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <TIM_Base_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	; (8005aa4 <TIM_Base_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0xf8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <TIM_Base_SetConfig+0x128>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <TIM_Base_SetConfig+0x12c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0xf8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a0f      	ldr	r2, [pc, #60]	; (8005ab0 <TIM_Base_SetConfig+0x130>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d103      	bne.n	8005a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	615a      	str	r2, [r3, #20]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800

08005ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e042      	b.n	8005b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fb fd37 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2224      	movs	r2, #36	; 0x24
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb4c 	bl	80061d0 <UART_SetConfig>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e022      	b.n	8005b88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 f99e 	bl	8006e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fa25 	bl	8006fd0 <UART_CheckIdleState>
 8005b86:	4603      	mov	r3, r0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d131      	bne.n	8005c0c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_UART_Receive_IT+0x24>
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e02a      	b.n	8005c0e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Receive_IT+0x36>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e023      	b.n	8005c0e <HAL_UART_Receive_IT+0x7e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <HAL_UART_Receive_IT+0x88>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005bfa:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f001 fab0 	bl	8007168 <UART_Start_Receive_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	58000c00 	.word	0x58000c00

08005c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c42:	4013      	ands	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d118      	bne.n	8005c7e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8282 	beq.w	8006178 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
      }
      return;
 8005c7c:	e27c      	b.n	8006178 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80ef 	beq.w	8005e64 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4b73      	ldr	r3, [pc, #460]	; (8005e58 <HAL_UART_IRQHandler+0x23c>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_UART_IRQHandler+0x240>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80e4 	beq.w	8005e64 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xac>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_UART_IRQHandler+0xd8>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_UART_IRQHandler+0x104>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d16:	f043 0202 	orr.w	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d015      	beq.n	8005d56 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <HAL_UART_IRQHandler+0x23c>)
 8005d38:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2208      	movs	r2, #8
 8005d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d4c:	f043 0208 	orr.w	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d011      	beq.n	8005d84 <HAL_UART_IRQHandler+0x168>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 81f6 	beq.w	800617c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d004      	beq.n	8005dde <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d031      	beq.n	8005e42 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fa80 	bl	80072e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d123      	bne.n	8005e3a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d013      	beq.n	8005e32 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0e:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <HAL_UART_IRQHandler+0x244>)
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fc98 	bl	800274c <HAL_DMA_Abort_IT>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d017      	beq.n	8005e52 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00f      	b.n	8005e52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9b6 	bl	80061a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e00b      	b.n	8005e52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9b2 	bl	80061a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	e007      	b.n	8005e52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f9ae 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005e50:	e194      	b.n	800617c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e52:	bf00      	nop
    return;
 8005e54:	e192      	b.n	800617c <HAL_UART_IRQHandler+0x560>
 8005e56:	bf00      	nop
 8005e58:	10000001 	.word	0x10000001
 8005e5c:	04000120 	.word	0x04000120
 8005e60:	08007349 	.word	0x08007349

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	f040 810f 	bne.w	800608c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8109 	beq.w	800608c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8103 	beq.w	800608c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	f040 80bb 	bne.w	8006014 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a96      	ldr	r2, [pc, #600]	; (8006100 <HAL_UART_IRQHandler+0x4e4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d059      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a94      	ldr	r2, [pc, #592]	; (8006104 <HAL_UART_IRQHandler+0x4e8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d053      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a92      	ldr	r2, [pc, #584]	; (8006108 <HAL_UART_IRQHandler+0x4ec>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d04d      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a90      	ldr	r2, [pc, #576]	; (800610c <HAL_UART_IRQHandler+0x4f0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d047      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a8e      	ldr	r2, [pc, #568]	; (8006110 <HAL_UART_IRQHandler+0x4f4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d041      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a8c      	ldr	r2, [pc, #560]	; (8006114 <HAL_UART_IRQHandler+0x4f8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d03b      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a8a      	ldr	r2, [pc, #552]	; (8006118 <HAL_UART_IRQHandler+0x4fc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d035      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a88      	ldr	r2, [pc, #544]	; (800611c <HAL_UART_IRQHandler+0x500>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02f      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a86      	ldr	r2, [pc, #536]	; (8006120 <HAL_UART_IRQHandler+0x504>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d029      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a84      	ldr	r2, [pc, #528]	; (8006124 <HAL_UART_IRQHandler+0x508>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d023      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a82      	ldr	r2, [pc, #520]	; (8006128 <HAL_UART_IRQHandler+0x50c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01d      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a80      	ldr	r2, [pc, #512]	; (800612c <HAL_UART_IRQHandler+0x510>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d017      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7e      	ldr	r2, [pc, #504]	; (8006130 <HAL_UART_IRQHandler+0x514>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d011      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a7c      	ldr	r2, [pc, #496]	; (8006134 <HAL_UART_IRQHandler+0x518>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7a      	ldr	r2, [pc, #488]	; (8006138 <HAL_UART_IRQHandler+0x51c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d005      	beq.n	8005f5e <HAL_UART_IRQHandler+0x342>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a78      	ldr	r2, [pc, #480]	; (800613c <HAL_UART_IRQHandler+0x520>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d105      	bne.n	8005f6a <HAL_UART_IRQHandler+0x34e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	e004      	b.n	8005f74 <HAL_UART_IRQHandler+0x358>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005f76:	893b      	ldrh	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8101 	beq.w	8006180 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f84:	893a      	ldrh	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	f080 80fa 	bcs.w	8006180 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	893a      	ldrh	r2, [r7, #8]
 8005f90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d02b      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0210 	bic.w	r2, r2, #16
 8005fec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fc f88c 	bl	8002110 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006004:	b29b      	uxth	r3, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	b29b      	uxth	r3, r3
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8d3 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006012:	e0b5      	b.n	8006180 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80a8 	beq.w	8006184 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8006034:	897b      	ldrh	r3, [r7, #10]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80a4 	beq.w	8006184 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800604a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <HAL_UART_IRQHandler+0x524>)
 8006058:	400b      	ands	r3, r1
 800605a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0210 	bic.w	r2, r2, #16
 800607e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006080:	897b      	ldrh	r3, [r7, #10]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f897 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800608a:	e07b      	b.n	8006184 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <HAL_UART_IRQHandler+0x496>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fc58 	bl	8007960 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060b0:	e06b      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d057      	beq.n	8006188 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
    }
    return;
 80060e0:	e052      	b.n	8006188 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02b      	beq.n	8006144 <HAL_UART_IRQHandler+0x528>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d026      	beq.n	8006144 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 f93c 	bl	8007374 <UART_EndTransmit_IT>
    return;
 80060fc:	e045      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
 80060fe:	bf00      	nop
 8006100:	40020010 	.word	0x40020010
 8006104:	40020028 	.word	0x40020028
 8006108:	40020040 	.word	0x40020040
 800610c:	40020058 	.word	0x40020058
 8006110:	40020070 	.word	0x40020070
 8006114:	40020088 	.word	0x40020088
 8006118:	400200a0 	.word	0x400200a0
 800611c:	400200b8 	.word	0x400200b8
 8006120:	40020410 	.word	0x40020410
 8006124:	40020428 	.word	0x40020428
 8006128:	40020440 	.word	0x40020440
 800612c:	40020458 	.word	0x40020458
 8006130:	40020470 	.word	0x40020470
 8006134:	40020488 	.word	0x40020488
 8006138:	400204a0 	.word	0x400204a0
 800613c:	400204b8 	.word	0x400204b8
 8006140:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_UART_IRQHandler+0x544>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fc15 	bl	8007988 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800615e:	e014      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <HAL_UART_IRQHandler+0x56e>
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da0c      	bge.n	800618a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fbff 	bl	8007974 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006176:	e008      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
      return;
 8006178:	bf00      	nop
 800617a:	e006      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
    return;
 800617c:	bf00      	nop
 800617e:	e004      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
      return;
 8006180:	bf00      	nop
 8006182:	e002      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
      return;
 8006184:	bf00      	nop
 8006186:	e000      	b.n	800618a <HAL_UART_IRQHandler+0x56e>
    return;
 8006188:	bf00      	nop
  }
}
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b08e      	sub	sp, #56	; 0x38
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4bbf      	ldr	r3, [pc, #764]	; (80064fc <UART_SetConfig+0x32c>)
 80061fe:	4013      	ands	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006206:	430b      	orrs	r3, r1
 8006208:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4ab5      	ldr	r2, [pc, #724]	; (8006500 <UART_SetConfig+0x330>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006236:	4313      	orrs	r3, r2
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	4bb0      	ldr	r3, [pc, #704]	; (8006504 <UART_SetConfig+0x334>)
 8006242:	4013      	ands	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800624a:	430b      	orrs	r3, r1
 800624c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	f023 010f 	bic.w	r1, r3, #15
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4aa7      	ldr	r2, [pc, #668]	; (8006508 <UART_SetConfig+0x338>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d176      	bne.n	800635c <UART_SetConfig+0x18c>
 800626e:	4ba7      	ldr	r3, [pc, #668]	; (800650c <UART_SetConfig+0x33c>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006276:	2b28      	cmp	r3, #40	; 0x28
 8006278:	d86c      	bhi.n	8006354 <UART_SetConfig+0x184>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <UART_SetConfig+0xb0>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006325 	.word	0x08006325
 8006284:	08006355 	.word	0x08006355
 8006288:	08006355 	.word	0x08006355
 800628c:	08006355 	.word	0x08006355
 8006290:	08006355 	.word	0x08006355
 8006294:	08006355 	.word	0x08006355
 8006298:	08006355 	.word	0x08006355
 800629c:	08006355 	.word	0x08006355
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	08006355 	.word	0x08006355
 80062a8:	08006355 	.word	0x08006355
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006355 	.word	0x08006355
 80062b4:	08006355 	.word	0x08006355
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006355 	.word	0x08006355
 80062c0:	08006335 	.word	0x08006335
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006355 	.word	0x08006355
 80062cc:	08006355 	.word	0x08006355
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006355 	.word	0x08006355
 80062d8:	08006355 	.word	0x08006355
 80062dc:	08006355 	.word	0x08006355
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	08006355 	.word	0x08006355
 80062e8:	08006355 	.word	0x08006355
 80062ec:	08006355 	.word	0x08006355
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006355 	.word	0x08006355
 80062f8:	08006355 	.word	0x08006355
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006345 	.word	0x08006345
 8006304:	08006355 	.word	0x08006355
 8006308:	08006355 	.word	0x08006355
 800630c:	08006355 	.word	0x08006355
 8006310:	08006355 	.word	0x08006355
 8006314:	08006355 	.word	0x08006355
 8006318:	08006355 	.word	0x08006355
 800631c:	08006355 	.word	0x08006355
 8006320:	0800634d 	.word	0x0800634d
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e326      	b.n	800697a <UART_SetConfig+0x7aa>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	e322      	b.n	800697a <UART_SetConfig+0x7aa>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633a:	e31e      	b.n	800697a <UART_SetConfig+0x7aa>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006342:	e31a      	b.n	800697a <UART_SetConfig+0x7aa>
 8006344:	2320      	movs	r3, #32
 8006346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634a:	e316      	b.n	800697a <UART_SetConfig+0x7aa>
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006352:	e312      	b.n	800697a <UART_SetConfig+0x7aa>
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635a:	e30e      	b.n	800697a <UART_SetConfig+0x7aa>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a6b      	ldr	r2, [pc, #428]	; (8006510 <UART_SetConfig+0x340>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d130      	bne.n	80063c8 <UART_SetConfig+0x1f8>
 8006366:	4b69      	ldr	r3, [pc, #420]	; (800650c <UART_SetConfig+0x33c>)
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	d826      	bhi.n	80063c0 <UART_SetConfig+0x1f0>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0x1a8>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006391 	.word	0x08006391
 800637c:	08006399 	.word	0x08006399
 8006380:	080063a1 	.word	0x080063a1
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006396:	e2f0      	b.n	800697a <UART_SetConfig+0x7aa>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800639e:	e2ec      	b.n	800697a <UART_SetConfig+0x7aa>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063a6:	e2e8      	b.n	800697a <UART_SetConfig+0x7aa>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ae:	e2e4      	b.n	800697a <UART_SetConfig+0x7aa>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e2e0      	b.n	800697a <UART_SetConfig+0x7aa>
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e2dc      	b.n	800697a <UART_SetConfig+0x7aa>
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e2d8      	b.n	800697a <UART_SetConfig+0x7aa>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a51      	ldr	r2, [pc, #324]	; (8006514 <UART_SetConfig+0x344>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d130      	bne.n	8006434 <UART_SetConfig+0x264>
 80063d2:	4b4e      	ldr	r3, [pc, #312]	; (800650c <UART_SetConfig+0x33c>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d826      	bhi.n	800642c <UART_SetConfig+0x25c>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0x214>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006402:	e2ba      	b.n	800697a <UART_SetConfig+0x7aa>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800640a:	e2b6      	b.n	800697a <UART_SetConfig+0x7aa>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006412:	e2b2      	b.n	800697a <UART_SetConfig+0x7aa>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800641a:	e2ae      	b.n	800697a <UART_SetConfig+0x7aa>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006422:	e2aa      	b.n	800697a <UART_SetConfig+0x7aa>
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642a:	e2a6      	b.n	800697a <UART_SetConfig+0x7aa>
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006432:	e2a2      	b.n	800697a <UART_SetConfig+0x7aa>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a37      	ldr	r2, [pc, #220]	; (8006518 <UART_SetConfig+0x348>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d130      	bne.n	80064a0 <UART_SetConfig+0x2d0>
 800643e:	4b33      	ldr	r3, [pc, #204]	; (800650c <UART_SetConfig+0x33c>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b05      	cmp	r3, #5
 8006448:	d826      	bhi.n	8006498 <UART_SetConfig+0x2c8>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0x280>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006469 	.word	0x08006469
 8006454:	08006471 	.word	0x08006471
 8006458:	08006479 	.word	0x08006479
 800645c:	08006481 	.word	0x08006481
 8006460:	08006489 	.word	0x08006489
 8006464:	08006491 	.word	0x08006491
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646e:	e284      	b.n	800697a <UART_SetConfig+0x7aa>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006476:	e280      	b.n	800697a <UART_SetConfig+0x7aa>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647e:	e27c      	b.n	800697a <UART_SetConfig+0x7aa>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006486:	e278      	b.n	800697a <UART_SetConfig+0x7aa>
 8006488:	2320      	movs	r3, #32
 800648a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648e:	e274      	b.n	800697a <UART_SetConfig+0x7aa>
 8006490:	2340      	movs	r3, #64	; 0x40
 8006492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006496:	e270      	b.n	800697a <UART_SetConfig+0x7aa>
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800649e:	e26c      	b.n	800697a <UART_SetConfig+0x7aa>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <UART_SetConfig+0x34c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d142      	bne.n	8006530 <UART_SetConfig+0x360>
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <UART_SetConfig+0x33c>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d838      	bhi.n	8006528 <UART_SetConfig+0x358>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x2ec>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064d5 	.word	0x080064d5
 80064c0:	080064dd 	.word	0x080064dd
 80064c4:	080064e5 	.word	0x080064e5
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	08006521 	.word	0x08006521
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064da:	e24e      	b.n	800697a <UART_SetConfig+0x7aa>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e2:	e24a      	b.n	800697a <UART_SetConfig+0x7aa>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ea:	e246      	b.n	800697a <UART_SetConfig+0x7aa>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f2:	e242      	b.n	800697a <UART_SetConfig+0x7aa>
 80064f4:	2320      	movs	r3, #32
 80064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fa:	e23e      	b.n	800697a <UART_SetConfig+0x7aa>
 80064fc:	cfff69f3 	.word	0xcfff69f3
 8006500:	58000c00 	.word	0x58000c00
 8006504:	11fff4ff 	.word	0x11fff4ff
 8006508:	40011000 	.word	0x40011000
 800650c:	58024400 	.word	0x58024400
 8006510:	40004400 	.word	0x40004400
 8006514:	40004800 	.word	0x40004800
 8006518:	40004c00 	.word	0x40004c00
 800651c:	40005000 	.word	0x40005000
 8006520:	2340      	movs	r3, #64	; 0x40
 8006522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006526:	e228      	b.n	800697a <UART_SetConfig+0x7aa>
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652e:	e224      	b.n	800697a <UART_SetConfig+0x7aa>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4ab1      	ldr	r2, [pc, #708]	; (80067fc <UART_SetConfig+0x62c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d176      	bne.n	8006628 <UART_SetConfig+0x458>
 800653a:	4bb1      	ldr	r3, [pc, #708]	; (8006800 <UART_SetConfig+0x630>)
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006542:	2b28      	cmp	r3, #40	; 0x28
 8006544:	d86c      	bhi.n	8006620 <UART_SetConfig+0x450>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <UART_SetConfig+0x37c>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065f1 	.word	0x080065f1
 8006550:	08006621 	.word	0x08006621
 8006554:	08006621 	.word	0x08006621
 8006558:	08006621 	.word	0x08006621
 800655c:	08006621 	.word	0x08006621
 8006560:	08006621 	.word	0x08006621
 8006564:	08006621 	.word	0x08006621
 8006568:	08006621 	.word	0x08006621
 800656c:	080065f9 	.word	0x080065f9
 8006570:	08006621 	.word	0x08006621
 8006574:	08006621 	.word	0x08006621
 8006578:	08006621 	.word	0x08006621
 800657c:	08006621 	.word	0x08006621
 8006580:	08006621 	.word	0x08006621
 8006584:	08006621 	.word	0x08006621
 8006588:	08006621 	.word	0x08006621
 800658c:	08006601 	.word	0x08006601
 8006590:	08006621 	.word	0x08006621
 8006594:	08006621 	.word	0x08006621
 8006598:	08006621 	.word	0x08006621
 800659c:	08006621 	.word	0x08006621
 80065a0:	08006621 	.word	0x08006621
 80065a4:	08006621 	.word	0x08006621
 80065a8:	08006621 	.word	0x08006621
 80065ac:	08006609 	.word	0x08006609
 80065b0:	08006621 	.word	0x08006621
 80065b4:	08006621 	.word	0x08006621
 80065b8:	08006621 	.word	0x08006621
 80065bc:	08006621 	.word	0x08006621
 80065c0:	08006621 	.word	0x08006621
 80065c4:	08006621 	.word	0x08006621
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006621 	.word	0x08006621
 80065d4:	08006621 	.word	0x08006621
 80065d8:	08006621 	.word	0x08006621
 80065dc:	08006621 	.word	0x08006621
 80065e0:	08006621 	.word	0x08006621
 80065e4:	08006621 	.word	0x08006621
 80065e8:	08006621 	.word	0x08006621
 80065ec:	08006619 	.word	0x08006619
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f6:	e1c0      	b.n	800697a <UART_SetConfig+0x7aa>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fe:	e1bc      	b.n	800697a <UART_SetConfig+0x7aa>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006606:	e1b8      	b.n	800697a <UART_SetConfig+0x7aa>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660e:	e1b4      	b.n	800697a <UART_SetConfig+0x7aa>
 8006610:	2320      	movs	r3, #32
 8006612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006616:	e1b0      	b.n	800697a <UART_SetConfig+0x7aa>
 8006618:	2340      	movs	r3, #64	; 0x40
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661e:	e1ac      	b.n	800697a <UART_SetConfig+0x7aa>
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006626:	e1a8      	b.n	800697a <UART_SetConfig+0x7aa>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a75      	ldr	r2, [pc, #468]	; (8006804 <UART_SetConfig+0x634>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d130      	bne.n	8006694 <UART_SetConfig+0x4c4>
 8006632:	4b73      	ldr	r3, [pc, #460]	; (8006800 <UART_SetConfig+0x630>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b05      	cmp	r3, #5
 800663c:	d826      	bhi.n	800668c <UART_SetConfig+0x4bc>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x474>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800666d 	.word	0x0800666d
 8006650:	08006675 	.word	0x08006675
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006685 	.word	0x08006685
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006662:	e18a      	b.n	800697a <UART_SetConfig+0x7aa>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666a:	e186      	b.n	800697a <UART_SetConfig+0x7aa>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006672:	e182      	b.n	800697a <UART_SetConfig+0x7aa>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667a:	e17e      	b.n	800697a <UART_SetConfig+0x7aa>
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006682:	e17a      	b.n	800697a <UART_SetConfig+0x7aa>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668a:	e176      	b.n	800697a <UART_SetConfig+0x7aa>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006692:	e172      	b.n	800697a <UART_SetConfig+0x7aa>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5b      	ldr	r2, [pc, #364]	; (8006808 <UART_SetConfig+0x638>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d130      	bne.n	8006700 <UART_SetConfig+0x530>
 800669e:	4b58      	ldr	r3, [pc, #352]	; (8006800 <UART_SetConfig+0x630>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d826      	bhi.n	80066f8 <UART_SetConfig+0x528>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x4e0>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c9 	.word	0x080066c9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066d9 	.word	0x080066d9
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ce:	e154      	b.n	800697a <UART_SetConfig+0x7aa>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d6:	e150      	b.n	800697a <UART_SetConfig+0x7aa>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066de:	e14c      	b.n	800697a <UART_SetConfig+0x7aa>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e6:	e148      	b.n	800697a <UART_SetConfig+0x7aa>
 80066e8:	2320      	movs	r3, #32
 80066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ee:	e144      	b.n	800697a <UART_SetConfig+0x7aa>
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f6:	e140      	b.n	800697a <UART_SetConfig+0x7aa>
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fe:	e13c      	b.n	800697a <UART_SetConfig+0x7aa>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a41      	ldr	r2, [pc, #260]	; (800680c <UART_SetConfig+0x63c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f040 8082 	bne.w	8006810 <UART_SetConfig+0x640>
 800670c:	4b3c      	ldr	r3, [pc, #240]	; (8006800 <UART_SetConfig+0x630>)
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006714:	2b28      	cmp	r3, #40	; 0x28
 8006716:	d86d      	bhi.n	80067f4 <UART_SetConfig+0x624>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x550>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	080067c5 	.word	0x080067c5
 8006724:	080067f5 	.word	0x080067f5
 8006728:	080067f5 	.word	0x080067f5
 800672c:	080067f5 	.word	0x080067f5
 8006730:	080067f5 	.word	0x080067f5
 8006734:	080067f5 	.word	0x080067f5
 8006738:	080067f5 	.word	0x080067f5
 800673c:	080067f5 	.word	0x080067f5
 8006740:	080067cd 	.word	0x080067cd
 8006744:	080067f5 	.word	0x080067f5
 8006748:	080067f5 	.word	0x080067f5
 800674c:	080067f5 	.word	0x080067f5
 8006750:	080067f5 	.word	0x080067f5
 8006754:	080067f5 	.word	0x080067f5
 8006758:	080067f5 	.word	0x080067f5
 800675c:	080067f5 	.word	0x080067f5
 8006760:	080067d5 	.word	0x080067d5
 8006764:	080067f5 	.word	0x080067f5
 8006768:	080067f5 	.word	0x080067f5
 800676c:	080067f5 	.word	0x080067f5
 8006770:	080067f5 	.word	0x080067f5
 8006774:	080067f5 	.word	0x080067f5
 8006778:	080067f5 	.word	0x080067f5
 800677c:	080067f5 	.word	0x080067f5
 8006780:	080067dd 	.word	0x080067dd
 8006784:	080067f5 	.word	0x080067f5
 8006788:	080067f5 	.word	0x080067f5
 800678c:	080067f5 	.word	0x080067f5
 8006790:	080067f5 	.word	0x080067f5
 8006794:	080067f5 	.word	0x080067f5
 8006798:	080067f5 	.word	0x080067f5
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	080067e5 	.word	0x080067e5
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	080067f5 	.word	0x080067f5
 80067ac:	080067f5 	.word	0x080067f5
 80067b0:	080067f5 	.word	0x080067f5
 80067b4:	080067f5 	.word	0x080067f5
 80067b8:	080067f5 	.word	0x080067f5
 80067bc:	080067f5 	.word	0x080067f5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e0d6      	b.n	800697a <UART_SetConfig+0x7aa>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e0d2      	b.n	800697a <UART_SetConfig+0x7aa>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067da:	e0ce      	b.n	800697a <UART_SetConfig+0x7aa>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e2:	e0ca      	b.n	800697a <UART_SetConfig+0x7aa>
 80067e4:	2320      	movs	r3, #32
 80067e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ea:	e0c6      	b.n	800697a <UART_SetConfig+0x7aa>
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e0c2      	b.n	800697a <UART_SetConfig+0x7aa>
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e0be      	b.n	800697a <UART_SetConfig+0x7aa>
 80067fc:	40011400 	.word	0x40011400
 8006800:	58024400 	.word	0x58024400
 8006804:	40007800 	.word	0x40007800
 8006808:	40007c00 	.word	0x40007c00
 800680c:	40011800 	.word	0x40011800
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4aad      	ldr	r2, [pc, #692]	; (8006acc <UART_SetConfig+0x8fc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d176      	bne.n	8006908 <UART_SetConfig+0x738>
 800681a:	4bad      	ldr	r3, [pc, #692]	; (8006ad0 <UART_SetConfig+0x900>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006822:	2b28      	cmp	r3, #40	; 0x28
 8006824:	d86c      	bhi.n	8006900 <UART_SetConfig+0x730>
 8006826:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x65c>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	080068d1 	.word	0x080068d1
 8006830:	08006901 	.word	0x08006901
 8006834:	08006901 	.word	0x08006901
 8006838:	08006901 	.word	0x08006901
 800683c:	08006901 	.word	0x08006901
 8006840:	08006901 	.word	0x08006901
 8006844:	08006901 	.word	0x08006901
 8006848:	08006901 	.word	0x08006901
 800684c:	080068d9 	.word	0x080068d9
 8006850:	08006901 	.word	0x08006901
 8006854:	08006901 	.word	0x08006901
 8006858:	08006901 	.word	0x08006901
 800685c:	08006901 	.word	0x08006901
 8006860:	08006901 	.word	0x08006901
 8006864:	08006901 	.word	0x08006901
 8006868:	08006901 	.word	0x08006901
 800686c:	080068e1 	.word	0x080068e1
 8006870:	08006901 	.word	0x08006901
 8006874:	08006901 	.word	0x08006901
 8006878:	08006901 	.word	0x08006901
 800687c:	08006901 	.word	0x08006901
 8006880:	08006901 	.word	0x08006901
 8006884:	08006901 	.word	0x08006901
 8006888:	08006901 	.word	0x08006901
 800688c:	080068e9 	.word	0x080068e9
 8006890:	08006901 	.word	0x08006901
 8006894:	08006901 	.word	0x08006901
 8006898:	08006901 	.word	0x08006901
 800689c:	08006901 	.word	0x08006901
 80068a0:	08006901 	.word	0x08006901
 80068a4:	08006901 	.word	0x08006901
 80068a8:	08006901 	.word	0x08006901
 80068ac:	080068f1 	.word	0x080068f1
 80068b0:	08006901 	.word	0x08006901
 80068b4:	08006901 	.word	0x08006901
 80068b8:	08006901 	.word	0x08006901
 80068bc:	08006901 	.word	0x08006901
 80068c0:	08006901 	.word	0x08006901
 80068c4:	08006901 	.word	0x08006901
 80068c8:	08006901 	.word	0x08006901
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e050      	b.n	800697a <UART_SetConfig+0x7aa>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e04c      	b.n	800697a <UART_SetConfig+0x7aa>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e048      	b.n	800697a <UART_SetConfig+0x7aa>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e044      	b.n	800697a <UART_SetConfig+0x7aa>
 80068f0:	2320      	movs	r3, #32
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e040      	b.n	800697a <UART_SetConfig+0x7aa>
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e03c      	b.n	800697a <UART_SetConfig+0x7aa>
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e038      	b.n	800697a <UART_SetConfig+0x7aa>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a71      	ldr	r2, [pc, #452]	; (8006ad4 <UART_SetConfig+0x904>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d130      	bne.n	8006974 <UART_SetConfig+0x7a4>
 8006912:	4b6f      	ldr	r3, [pc, #444]	; (8006ad0 <UART_SetConfig+0x900>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b05      	cmp	r3, #5
 800691c:	d826      	bhi.n	800696c <UART_SetConfig+0x79c>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x754>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	2302      	movs	r3, #2
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006942:	e01a      	b.n	800697a <UART_SetConfig+0x7aa>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694a:	e016      	b.n	800697a <UART_SetConfig+0x7aa>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006952:	e012      	b.n	800697a <UART_SetConfig+0x7aa>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695a:	e00e      	b.n	800697a <UART_SetConfig+0x7aa>
 800695c:	2320      	movs	r3, #32
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e00a      	b.n	800697a <UART_SetConfig+0x7aa>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e006      	b.n	800697a <UART_SetConfig+0x7aa>
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006972:	e002      	b.n	800697a <UART_SetConfig+0x7aa>
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a55      	ldr	r2, [pc, #340]	; (8006ad4 <UART_SetConfig+0x904>)
 8006980:	4293      	cmp	r3, r2
 8006982:	f040 80f0 	bne.w	8006b66 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800698a:	2b20      	cmp	r3, #32
 800698c:	dc46      	bgt.n	8006a1c <UART_SetConfig+0x84c>
 800698e:	2b02      	cmp	r3, #2
 8006990:	db75      	blt.n	8006a7e <UART_SetConfig+0x8ae>
 8006992:	3b02      	subs	r3, #2
 8006994:	2b1e      	cmp	r3, #30
 8006996:	d872      	bhi.n	8006a7e <UART_SetConfig+0x8ae>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0x7d0>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	08006a23 	.word	0x08006a23
 80069a4:	08006a7f 	.word	0x08006a7f
 80069a8:	08006a2b 	.word	0x08006a2b
 80069ac:	08006a7f 	.word	0x08006a7f
 80069b0:	08006a7f 	.word	0x08006a7f
 80069b4:	08006a7f 	.word	0x08006a7f
 80069b8:	08006a3b 	.word	0x08006a3b
 80069bc:	08006a7f 	.word	0x08006a7f
 80069c0:	08006a7f 	.word	0x08006a7f
 80069c4:	08006a7f 	.word	0x08006a7f
 80069c8:	08006a7f 	.word	0x08006a7f
 80069cc:	08006a7f 	.word	0x08006a7f
 80069d0:	08006a7f 	.word	0x08006a7f
 80069d4:	08006a7f 	.word	0x08006a7f
 80069d8:	08006a4b 	.word	0x08006a4b
 80069dc:	08006a7f 	.word	0x08006a7f
 80069e0:	08006a7f 	.word	0x08006a7f
 80069e4:	08006a7f 	.word	0x08006a7f
 80069e8:	08006a7f 	.word	0x08006a7f
 80069ec:	08006a7f 	.word	0x08006a7f
 80069f0:	08006a7f 	.word	0x08006a7f
 80069f4:	08006a7f 	.word	0x08006a7f
 80069f8:	08006a7f 	.word	0x08006a7f
 80069fc:	08006a7f 	.word	0x08006a7f
 8006a00:	08006a7f 	.word	0x08006a7f
 8006a04:	08006a7f 	.word	0x08006a7f
 8006a08:	08006a7f 	.word	0x08006a7f
 8006a0c:	08006a7f 	.word	0x08006a7f
 8006a10:	08006a7f 	.word	0x08006a7f
 8006a14:	08006a7f 	.word	0x08006a7f
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d02a      	beq.n	8006a76 <UART_SetConfig+0x8a6>
 8006a20:	e02d      	b.n	8006a7e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a22:	f7fe f97b 	bl	8004d1c <HAL_RCCEx_GetD3PCLK1Freq>
 8006a26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006a28:	e02f      	b.n	8006a8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe f98a 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a38:	e027      	b.n	8006a8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fad6 	bl	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a48:	e01f      	b.n	8006a8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4a:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <UART_SetConfig+0x900>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a56:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <UART_SetConfig+0x900>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <UART_SetConfig+0x908>)
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a68:	e00f      	b.n	8006a8a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <UART_SetConfig+0x908>)
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a6e:	e00c      	b.n	8006a8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <UART_SetConfig+0x90c>)
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a74:	e009      	b.n	8006a8a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 81e6 	beq.w	8006e5e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <UART_SetConfig+0x910>)
 8006a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4413      	add	r3, r2
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d305      	bcc.n	8006ac2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d910      	bls.n	8006ae4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ac8:	e1c9      	b.n	8006e5e <UART_SetConfig+0xc8e>
 8006aca:	bf00      	nop
 8006acc:	40011c00 	.word	0x40011c00
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	58000c00 	.word	0x58000c00
 8006ad8:	03d09000 	.word	0x03d09000
 8006adc:	003d0900 	.word	0x003d0900
 8006ae0:	0800846c 	.word	0x0800846c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	4ac1      	ldr	r2, [pc, #772]	; (8006df8 <UART_SetConfig+0xc28>)
 8006af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	f7f9 fbf8 	bl	80002f0 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	020b      	lsls	r3, r1, #8
 8006b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b16:	0202      	lsls	r2, r0, #8
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	6849      	ldr	r1, [r1, #4]
 8006b1c:	0849      	lsrs	r1, r1, #1
 8006b1e:	4608      	mov	r0, r1
 8006b20:	f04f 0100 	mov.w	r1, #0
 8006b24:	1814      	adds	r4, r2, r0
 8006b26:	eb43 0501 	adc.w	r5, r3, r1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 fbda 	bl	80002f0 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4613      	mov	r3, r2
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4a:	d308      	bcc.n	8006b5e <UART_SetConfig+0x98e>
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b52:	d204      	bcs.n	8006b5e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	e17f      	b.n	8006e5e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b64:	e17b      	b.n	8006e5e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6e:	f040 80be 	bne.w	8006cee <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8006b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	dc48      	bgt.n	8006c0c <UART_SetConfig+0xa3c>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	db7b      	blt.n	8006c76 <UART_SetConfig+0xaa6>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d879      	bhi.n	8006c76 <UART_SetConfig+0xaa6>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <UART_SetConfig+0x9b8>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c1b 	.word	0x08006c1b
 8006b90:	08006c77 	.word	0x08006c77
 8006b94:	08006c77 	.word	0x08006c77
 8006b98:	08006c23 	.word	0x08006c23
 8006b9c:	08006c77 	.word	0x08006c77
 8006ba0:	08006c77 	.word	0x08006c77
 8006ba4:	08006c77 	.word	0x08006c77
 8006ba8:	08006c33 	.word	0x08006c33
 8006bac:	08006c77 	.word	0x08006c77
 8006bb0:	08006c77 	.word	0x08006c77
 8006bb4:	08006c77 	.word	0x08006c77
 8006bb8:	08006c77 	.word	0x08006c77
 8006bbc:	08006c77 	.word	0x08006c77
 8006bc0:	08006c77 	.word	0x08006c77
 8006bc4:	08006c77 	.word	0x08006c77
 8006bc8:	08006c43 	.word	0x08006c43
 8006bcc:	08006c77 	.word	0x08006c77
 8006bd0:	08006c77 	.word	0x08006c77
 8006bd4:	08006c77 	.word	0x08006c77
 8006bd8:	08006c77 	.word	0x08006c77
 8006bdc:	08006c77 	.word	0x08006c77
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006c77 	.word	0x08006c77
 8006be8:	08006c77 	.word	0x08006c77
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c77 	.word	0x08006c77
 8006bf4:	08006c77 	.word	0x08006c77
 8006bf8:	08006c77 	.word	0x08006c77
 8006bfc:	08006c77 	.word	0x08006c77
 8006c00:	08006c77 	.word	0x08006c77
 8006c04:	08006c77 	.word	0x08006c77
 8006c08:	08006c69 	.word	0x08006c69
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d02e      	beq.n	8006c6e <UART_SetConfig+0xa9e>
 8006c10:	e031      	b.n	8006c76 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c12:	f7fd f94b 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8006c16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c18:	e033      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c1a:	f7fd f95d 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8006c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c20:	e02f      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c22:	f107 0314 	add.w	r3, r7, #20
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe f88e 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c30:	e027      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f9da 	bl	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c40:	e01f      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c42:	4b6e      	ldr	r3, [pc, #440]	; (8006dfc <UART_SetConfig+0xc2c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c4e:	4b6b      	ldr	r3, [pc, #428]	; (8006dfc <UART_SetConfig+0xc2c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	4a69      	ldr	r2, [pc, #420]	; (8006e00 <UART_SetConfig+0xc30>)
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c60:	e00f      	b.n	8006c82 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006c62:	4b67      	ldr	r3, [pc, #412]	; (8006e00 <UART_SetConfig+0xc30>)
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c66:	e00c      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c68:	4b66      	ldr	r3, [pc, #408]	; (8006e04 <UART_SetConfig+0xc34>)
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c6c:	e009      	b.n	8006c82 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c74:	e005      	b.n	8006c82 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80ea 	beq.w	8006e5e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	4a5a      	ldr	r2, [pc, #360]	; (8006df8 <UART_SetConfig+0xc28>)
 8006c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c9c:	005a      	lsls	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	441a      	add	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	d916      	bls.n	8006ce6 <UART_SetConfig+0xb16>
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbe:	d212      	bcs.n	8006ce6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f023 030f 	bic.w	r3, r3, #15
 8006cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ce2:	60da      	str	r2, [r3, #12]
 8006ce4:	e0bb      	b.n	8006e5e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cec:	e0b7      	b.n	8006e5e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	dc4a      	bgt.n	8006d8c <UART_SetConfig+0xbbc>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f2c0 8086 	blt.w	8006e08 <UART_SetConfig+0xc38>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	f200 8083 	bhi.w	8006e08 <UART_SetConfig+0xc38>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0xb38>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006e09 	.word	0x08006e09
 8006d14:	08006e09 	.word	0x08006e09
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006e09 	.word	0x08006e09
 8006d20:	08006e09 	.word	0x08006e09
 8006d24:	08006e09 	.word	0x08006e09
 8006d28:	08006db3 	.word	0x08006db3
 8006d2c:	08006e09 	.word	0x08006e09
 8006d30:	08006e09 	.word	0x08006e09
 8006d34:	08006e09 	.word	0x08006e09
 8006d38:	08006e09 	.word	0x08006e09
 8006d3c:	08006e09 	.word	0x08006e09
 8006d40:	08006e09 	.word	0x08006e09
 8006d44:	08006e09 	.word	0x08006e09
 8006d48:	08006dc3 	.word	0x08006dc3
 8006d4c:	08006e09 	.word	0x08006e09
 8006d50:	08006e09 	.word	0x08006e09
 8006d54:	08006e09 	.word	0x08006e09
 8006d58:	08006e09 	.word	0x08006e09
 8006d5c:	08006e09 	.word	0x08006e09
 8006d60:	08006e09 	.word	0x08006e09
 8006d64:	08006e09 	.word	0x08006e09
 8006d68:	08006e09 	.word	0x08006e09
 8006d6c:	08006e09 	.word	0x08006e09
 8006d70:	08006e09 	.word	0x08006e09
 8006d74:	08006e09 	.word	0x08006e09
 8006d78:	08006e09 	.word	0x08006e09
 8006d7c:	08006e09 	.word	0x08006e09
 8006d80:	08006e09 	.word	0x08006e09
 8006d84:	08006e09 	.word	0x08006e09
 8006d88:	08006de9 	.word	0x08006de9
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	d02e      	beq.n	8006dee <UART_SetConfig+0xc1e>
 8006d90:	e03a      	b.n	8006e08 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fd f88b 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8006d96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d98:	e03c      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9a:	f7fd f89d 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8006d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006da0:	e038      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da2:	f107 0314 	add.w	r3, r7, #20
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd ffce 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006db0:	e030      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f91a 	bl	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dc0:	e028      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <UART_SetConfig+0xc2c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <UART_SetConfig+0xc2c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <UART_SetConfig+0xc30>)
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006de0:	e018      	b.n	8006e14 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <UART_SetConfig+0xc30>)
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006de6:	e015      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <UART_SetConfig+0xc34>)
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dec:	e012      	b.n	8006e14 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006df4:	e00e      	b.n	8006e14 <UART_SetConfig+0xc44>
 8006df6:	bf00      	nop
 8006df8:	0800846c 	.word	0x0800846c
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	03d09000 	.word	0x03d09000
 8006e04:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e12:	bf00      	nop
    }

    if (pclk != 0U)
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d021      	beq.n	8006e5e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <UART_SetConfig+0xcb8>)
 8006e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	085b      	lsrs	r3, r3, #1
 8006e32:	441a      	add	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2b0f      	cmp	r3, #15
 8006e44:	d908      	bls.n	8006e58 <UART_SetConfig+0xc88>
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4c:	d204      	bcs.n	8006e58 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	e002      	b.n	8006e5e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3738      	adds	r7, #56	; 0x38
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0800846c 	.word	0x0800846c

08006e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	d10a      	bne.n	8006fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fe0:	f7fa fd8e 	bl	8001b00 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d10e      	bne.n	8007012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f82f 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e025      	b.n	800705e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b04      	cmp	r3, #4
 800701e:	d10e      	bne.n	800703e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f819 	bl	8007066 <UART_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e00f      	b.n	800705e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	603b      	str	r3, [r7, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007076:	e062      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d05e      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007080:	f7fa fd3e 	bl	8001b00 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <UART_WaitOnFlagUntilTimeout+0x30>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11d      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e045      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02e      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ee:	d126      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007108:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	429a      	cmp	r2, r3
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d08d      	beq.n	8007078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719a:	d10e      	bne.n	80071ba <UART_Start_Receive_IT+0x52>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <UART_Start_Receive_IT+0x48>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071ae:	e02d      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	22ff      	movs	r2, #255	; 0xff
 80071b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071b8:	e028      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <UART_Start_Receive_IT+0x76>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <UART_Start_Receive_IT+0x6c>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071d2:	e01b      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	227f      	movs	r2, #127	; 0x7f
 80071d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071dc:	e016      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e6:	d10d      	bne.n	8007204 <UART_Start_Receive_IT+0x9c>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <UART_Start_Receive_IT+0x92>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	227f      	movs	r2, #127	; 0x7f
 80071f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071f8:	e008      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	223f      	movs	r2, #63	; 0x3f
 80071fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007202:	e003      	b.n	800720c <UART_Start_Receive_IT+0xa4>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2222      	movs	r2, #34	; 0x22
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007234:	d12a      	bne.n	800728c <UART_Start_Receive_IT+0x124>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	429a      	cmp	r2, r3
 8007240:	d324      	bcc.n	800728c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d107      	bne.n	800725c <UART_Start_Receive_IT+0xf4>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <UART_Start_Receive_IT+0x16c>)
 8007258:	671a      	str	r2, [r3, #112]	; 0x70
 800725a:	e002      	b.n	8007262 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <UART_Start_Receive_IT+0x170>)
 8007260:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007278:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	e01b      	b.n	80072c4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007294:	d107      	bne.n	80072a6 <UART_Start_Receive_IT+0x13e>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <UART_Start_Receive_IT+0x174>)
 80072a2:	671a      	str	r2, [r3, #112]	; 0x70
 80072a4:	e002      	b.n	80072ac <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a0d      	ldr	r2, [pc, #52]	; (80072e0 <UART_Start_Receive_IT+0x178>)
 80072aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80072c2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	0800775d 	.word	0x0800775d
 80072d8:	08007559 	.word	0x08007559
 80072dc:	08007481 	.word	0x08007481
 80072e0:	080073a9 	.word	0x080073a9

080072e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <UART_EndRxTransfer+0x60>)
 8007308:	400b      	ands	r3, r1
 800730a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d107      	bne.n	8007324 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0210 	bic.w	r2, r2, #16
 8007322:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	effffffe 	.word	0xeffffffe

08007348 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7fe ff1c 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe fef8 	bl	8006190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073be:	2b22      	cmp	r3, #34	; 0x22
 80073c0:	d152      	bne.n	8007468 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073ca:	89bb      	ldrh	r3, [r7, #12]
 80073cc:	b2d9      	uxtb	r1, r3
 80073ce:	89fb      	ldrh	r3, [r7, #14]
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	400a      	ands	r2, r1
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d139      	bne.n	8007478 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007412:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10f      	bne.n	800745a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0210 	bic.w	r2, r2, #16
 8007448:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fe feb0 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 8007458:	e002      	b.n	8007460 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7f9 fa78 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007466:	e007      	b.n	8007478 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0208 	orr.w	r2, r2, #8
 8007476:	619a      	str	r2, [r3, #24]
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800748e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	2b22      	cmp	r3, #34	; 0x22
 8007498:	d152      	bne.n	8007540 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80074a8:	89ba      	ldrh	r2, [r7, #12]
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	4013      	ands	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b8:	1c9a      	adds	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d139      	bne.n	8007550 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750e:	2b01      	cmp	r3, #1
 8007510:	d10f      	bne.n	8007532 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0210 	bic.w	r2, r2, #16
 8007520:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fe fe44 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 8007530:	e002      	b.n	8007538 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7f9 fa0c 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800753e:	e007      	b.n	8007550 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0208 	orr.w	r2, r2, #8
 800754e:	619a      	str	r2, [r3, #24]
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007566:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	2b22      	cmp	r3, #34	; 0x22
 8007588:	f040 80d8 	bne.w	800773c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007592:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007594:	e0a8      	b.n	80076e8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800759e:	89bb      	ldrh	r3, [r7, #12]
 80075a0:	b2d9      	uxtb	r1, r3
 80075a2:	8b7b      	ldrh	r3, [r7, #26]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075aa:	400a      	ands	r2, r1
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04d      	beq.n	800767a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d010      	beq.n	800760a <UART_RxISR_8BIT_FIFOEN+0xb2>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <UART_RxISR_8BIT_FIFOEN+0xde>
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2202      	movs	r2, #2
 8007624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762c:	f043 0204 	orr.w	r2, r3, #4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d010      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2204      	movs	r2, #4
 8007650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007658:	f043 0202 	orr.w	r2, r3, #2
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fe fd99 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d130      	bne.n	80076e8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007694:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	4b2c      	ldr	r3, [pc, #176]	; (8007754 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80076a2:	400b      	ands	r3, r1
 80076a4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10f      	bne.n	80076dc <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0210 	bic.w	r2, r2, #16
 80076ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fe fd6f 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 80076da:	e002      	b.n	80076e2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7f9 f937 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f47f af4e 	bne.w	8007596 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007700:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007702:	897b      	ldrh	r3, [r7, #10]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d021      	beq.n	800774c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800770e:	897a      	ldrh	r2, [r7, #10]
 8007710:	429a      	cmp	r2, r3
 8007712:	d21b      	bcs.n	800774c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007722:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8007728:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0220 	orr.w	r2, r2, #32
 8007738:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800773a:	e007      	b.n	800774c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	619a      	str	r2, [r3, #24]
}
 800774c:	bf00      	nop
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	effffffe 	.word	0xeffffffe
 8007758:	080073a9 	.word	0x080073a9

0800775c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	; 0x28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800776a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	2b22      	cmp	r3, #34	; 0x22
 800778c:	f040 80d8 	bne.w	8007940 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007796:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007798:	e0a8      	b.n	80078ec <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80077a8:	8aba      	ldrh	r2, [r7, #20]
 80077aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077ac:	4013      	ands	r3, r2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d04d      	beq.n	800787e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d010      	beq.n	800780e <UART_RxISR_16BIT_FIFOEN+0xb2>
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007804:	f043 0201 	orr.w	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <UART_RxISR_16BIT_FIFOEN+0xde>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2202      	movs	r2, #2
 8007828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007830:	f043 0204 	orr.w	r2, r3, #4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d010      	beq.n	8007866 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2204      	movs	r2, #4
 8007854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800785c:	f043 0202 	orr.w	r2, r3, #2
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fe fc97 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d130      	bne.n	80078ec <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007898:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6899      	ldr	r1, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b2c      	ldr	r3, [pc, #176]	; (8007958 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80078a6:	400b      	ands	r3, r1
 80078a8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d10f      	bne.n	80078e0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0210 	bic.w	r2, r2, #16
 80078ce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fe fc6d 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 80078de:	e002      	b.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 f835 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078ec:	8afb      	ldrh	r3, [r7, #22]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f47f af4e 	bne.w	800779a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007904:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007906:	89fb      	ldrh	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d021      	beq.n	8007950 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007912:	89fa      	ldrh	r2, [r7, #14]
 8007914:	429a      	cmp	r2, r3
 8007916:	d21b      	bcs.n	8007950 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007926:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a0c      	ldr	r2, [pc, #48]	; (800795c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800792c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0220 	orr.w	r2, r2, #32
 800793c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800793e:	e007      	b.n	8007950 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0208 	orr.w	r2, r2, #8
 800794e:	619a      	str	r2, [r3, #24]
}
 8007950:	bf00      	nop
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	effffffe 	.word	0xeffffffe
 800795c:	08007481 	.word	0x08007481

08007960 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e027      	b.n	8007a02 <HAL_UARTEx_DisableFifoMode+0x66>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2224      	movs	r2, #36	; 0x24
 80079be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e02d      	b.n	8007a82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2224      	movs	r2, #36	; 0x24
 8007a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f850 	bl	8007b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e02d      	b.n	8007afe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2224      	movs	r2, #36	; 0x24
 8007aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f812 	bl	8007b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b28:	e031      	b.n	8007b8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b2e:	2310      	movs	r3, #16
 8007b30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	0e5b      	lsrs	r3, r3, #25
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	0f5b      	lsrs	r3, r3, #29
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	7b3a      	ldrb	r2, [r7, #12]
 8007b56:	4911      	ldr	r1, [pc, #68]	; (8007b9c <UARTEx_SetNbDataToProcess+0x94>)
 8007b58:	5c8a      	ldrb	r2, [r1, r2]
 8007b5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b5e:	7b3a      	ldrb	r2, [r7, #12]
 8007b60:	490f      	ldr	r1, [pc, #60]	; (8007ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	7b7a      	ldrb	r2, [r7, #13]
 8007b74:	4909      	ldr	r1, [pc, #36]	; (8007b9c <UARTEx_SetNbDataToProcess+0x94>)
 8007b76:	5c8a      	ldrb	r2, [r1, r2]
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b7c:	7b7a      	ldrb	r2, [r7, #13]
 8007b7e:	4908      	ldr	r1, [pc, #32]	; (8007ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	08008484 	.word	0x08008484
 8007ba0:	0800848c 	.word	0x0800848c

08007ba4 <__errno>:
 8007ba4:	4b01      	ldr	r3, [pc, #4]	; (8007bac <__errno+0x8>)
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000010 	.word	0x20000010

08007bb0 <__libc_init_array>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	4d0d      	ldr	r5, [pc, #52]	; (8007be8 <__libc_init_array+0x38>)
 8007bb4:	4c0d      	ldr	r4, [pc, #52]	; (8007bec <__libc_init_array+0x3c>)
 8007bb6:	1b64      	subs	r4, r4, r5
 8007bb8:	10a4      	asrs	r4, r4, #2
 8007bba:	2600      	movs	r6, #0
 8007bbc:	42a6      	cmp	r6, r4
 8007bbe:	d109      	bne.n	8007bd4 <__libc_init_array+0x24>
 8007bc0:	4d0b      	ldr	r5, [pc, #44]	; (8007bf0 <__libc_init_array+0x40>)
 8007bc2:	4c0c      	ldr	r4, [pc, #48]	; (8007bf4 <__libc_init_array+0x44>)
 8007bc4:	f000 fc3e 	bl	8008444 <_init>
 8007bc8:	1b64      	subs	r4, r4, r5
 8007bca:	10a4      	asrs	r4, r4, #2
 8007bcc:	2600      	movs	r6, #0
 8007bce:	42a6      	cmp	r6, r4
 8007bd0:	d105      	bne.n	8007bde <__libc_init_array+0x2e>
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd8:	4798      	blx	r3
 8007bda:	3601      	adds	r6, #1
 8007bdc:	e7ee      	b.n	8007bbc <__libc_init_array+0xc>
 8007bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be2:	4798      	blx	r3
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7f2      	b.n	8007bce <__libc_init_array+0x1e>
 8007be8:	08008500 	.word	0x08008500
 8007bec:	08008500 	.word	0x08008500
 8007bf0:	08008500 	.word	0x08008500
 8007bf4:	08008504 	.word	0x08008504

08007bf8 <malloc>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <malloc+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 b863 	b.w	8007cc8 <_malloc_r>
 8007c02:	bf00      	nop
 8007c04:	20000010 	.word	0x20000010

08007c08 <free>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <free+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f000 b80b 	b.w	8007c28 <_free_r>
 8007c12:	bf00      	nop
 8007c14:	20000010 	.word	0x20000010

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <_free_r>:
 8007c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d048      	beq.n	8007cc0 <_free_r+0x98>
 8007c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c32:	9001      	str	r0, [sp, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f1a1 0404 	sub.w	r4, r1, #4
 8007c3a:	bfb8      	it	lt
 8007c3c:	18e4      	addlt	r4, r4, r3
 8007c3e:	f000 fb59 	bl	80082f4 <__malloc_lock>
 8007c42:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <_free_r+0x9c>)
 8007c44:	9801      	ldr	r0, [sp, #4]
 8007c46:	6813      	ldr	r3, [r2, #0]
 8007c48:	4615      	mov	r5, r2
 8007c4a:	b933      	cbnz	r3, 8007c5a <_free_r+0x32>
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	6014      	str	r4, [r2, #0]
 8007c50:	b003      	add	sp, #12
 8007c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c56:	f000 bb53 	b.w	8008300 <__malloc_unlock>
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	d90b      	bls.n	8007c76 <_free_r+0x4e>
 8007c5e:	6821      	ldr	r1, [r4, #0]
 8007c60:	1862      	adds	r2, r4, r1
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bf04      	itt	eq
 8007c66:	681a      	ldreq	r2, [r3, #0]
 8007c68:	685b      	ldreq	r3, [r3, #4]
 8007c6a:	6063      	str	r3, [r4, #4]
 8007c6c:	bf04      	itt	eq
 8007c6e:	1852      	addeq	r2, r2, r1
 8007c70:	6022      	streq	r2, [r4, #0]
 8007c72:	602c      	str	r4, [r5, #0]
 8007c74:	e7ec      	b.n	8007c50 <_free_r+0x28>
 8007c76:	461a      	mov	r2, r3
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	b10b      	cbz	r3, 8007c80 <_free_r+0x58>
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d9fa      	bls.n	8007c76 <_free_r+0x4e>
 8007c80:	6811      	ldr	r1, [r2, #0]
 8007c82:	1855      	adds	r5, r2, r1
 8007c84:	42a5      	cmp	r5, r4
 8007c86:	d10b      	bne.n	8007ca0 <_free_r+0x78>
 8007c88:	6824      	ldr	r4, [r4, #0]
 8007c8a:	4421      	add	r1, r4
 8007c8c:	1854      	adds	r4, r2, r1
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	d1dd      	bne.n	8007c50 <_free_r+0x28>
 8007c94:	681c      	ldr	r4, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	6053      	str	r3, [r2, #4]
 8007c9a:	4421      	add	r1, r4
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	e7d7      	b.n	8007c50 <_free_r+0x28>
 8007ca0:	d902      	bls.n	8007ca8 <_free_r+0x80>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	e7d3      	b.n	8007c50 <_free_r+0x28>
 8007ca8:	6825      	ldr	r5, [r4, #0]
 8007caa:	1961      	adds	r1, r4, r5
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf04      	itt	eq
 8007cb0:	6819      	ldreq	r1, [r3, #0]
 8007cb2:	685b      	ldreq	r3, [r3, #4]
 8007cb4:	6063      	str	r3, [r4, #4]
 8007cb6:	bf04      	itt	eq
 8007cb8:	1949      	addeq	r1, r1, r5
 8007cba:	6021      	streq	r1, [r4, #0]
 8007cbc:	6054      	str	r4, [r2, #4]
 8007cbe:	e7c7      	b.n	8007c50 <_free_r+0x28>
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bd30      	pop	{r4, r5, pc}
 8007cc4:	20000098 	.word	0x20000098

08007cc8 <_malloc_r>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	1ccd      	adds	r5, r1, #3
 8007ccc:	f025 0503 	bic.w	r5, r5, #3
 8007cd0:	3508      	adds	r5, #8
 8007cd2:	2d0c      	cmp	r5, #12
 8007cd4:	bf38      	it	cc
 8007cd6:	250c      	movcc	r5, #12
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	db01      	blt.n	8007ce2 <_malloc_r+0x1a>
 8007cde:	42a9      	cmp	r1, r5
 8007ce0:	d903      	bls.n	8007cea <_malloc_r+0x22>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cea:	f000 fb03 	bl	80082f4 <__malloc_lock>
 8007cee:	4921      	ldr	r1, [pc, #132]	; (8007d74 <_malloc_r+0xac>)
 8007cf0:	680a      	ldr	r2, [r1, #0]
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	b99c      	cbnz	r4, 8007d1e <_malloc_r+0x56>
 8007cf6:	4f20      	ldr	r7, [pc, #128]	; (8007d78 <_malloc_r+0xb0>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	b923      	cbnz	r3, 8007d06 <_malloc_r+0x3e>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f83c 	bl	8007d7c <_sbrk_r>
 8007d04:	6038      	str	r0, [r7, #0]
 8007d06:	4629      	mov	r1, r5
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f837 	bl	8007d7c <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d123      	bne.n	8007d5a <_malloc_r+0x92>
 8007d12:	230c      	movs	r3, #12
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 faf2 	bl	8008300 <__malloc_unlock>
 8007d1c:	e7e3      	b.n	8007ce6 <_malloc_r+0x1e>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	1b5b      	subs	r3, r3, r5
 8007d22:	d417      	bmi.n	8007d54 <_malloc_r+0x8c>
 8007d24:	2b0b      	cmp	r3, #11
 8007d26:	d903      	bls.n	8007d30 <_malloc_r+0x68>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	441c      	add	r4, r3
 8007d2c:	6025      	str	r5, [r4, #0]
 8007d2e:	e004      	b.n	8007d3a <_malloc_r+0x72>
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	42a2      	cmp	r2, r4
 8007d34:	bf0c      	ite	eq
 8007d36:	600b      	streq	r3, [r1, #0]
 8007d38:	6053      	strne	r3, [r2, #4]
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f000 fae0 	bl	8008300 <__malloc_unlock>
 8007d40:	f104 000b 	add.w	r0, r4, #11
 8007d44:	1d23      	adds	r3, r4, #4
 8007d46:	f020 0007 	bic.w	r0, r0, #7
 8007d4a:	1ac2      	subs	r2, r0, r3
 8007d4c:	d0cc      	beq.n	8007ce8 <_malloc_r+0x20>
 8007d4e:	1a1b      	subs	r3, r3, r0
 8007d50:	50a3      	str	r3, [r4, r2]
 8007d52:	e7c9      	b.n	8007ce8 <_malloc_r+0x20>
 8007d54:	4622      	mov	r2, r4
 8007d56:	6864      	ldr	r4, [r4, #4]
 8007d58:	e7cc      	b.n	8007cf4 <_malloc_r+0x2c>
 8007d5a:	1cc4      	adds	r4, r0, #3
 8007d5c:	f024 0403 	bic.w	r4, r4, #3
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	d0e3      	beq.n	8007d2c <_malloc_r+0x64>
 8007d64:	1a21      	subs	r1, r4, r0
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f808 	bl	8007d7c <_sbrk_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d1dd      	bne.n	8007d2c <_malloc_r+0x64>
 8007d70:	e7cf      	b.n	8007d12 <_malloc_r+0x4a>
 8007d72:	bf00      	nop
 8007d74:	20000098 	.word	0x20000098
 8007d78:	2000009c 	.word	0x2000009c

08007d7c <_sbrk_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d06      	ldr	r5, [pc, #24]	; (8007d98 <_sbrk_r+0x1c>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7f9 fd58 	bl	800183c <_sbrk>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_sbrk_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_sbrk_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20000a80 	.word	0x20000a80

08007d9c <setbuf>:
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007da2:	bf0c      	ite	eq
 8007da4:	2202      	moveq	r2, #2
 8007da6:	2200      	movne	r2, #0
 8007da8:	f000 b800 	b.w	8007dac <setvbuf>

08007dac <setvbuf>:
 8007dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007db0:	461d      	mov	r5, r3
 8007db2:	4b5d      	ldr	r3, [pc, #372]	; (8007f28 <setvbuf+0x17c>)
 8007db4:	681f      	ldr	r7, [r3, #0]
 8007db6:	4604      	mov	r4, r0
 8007db8:	460e      	mov	r6, r1
 8007dba:	4690      	mov	r8, r2
 8007dbc:	b127      	cbz	r7, 8007dc8 <setvbuf+0x1c>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	b913      	cbnz	r3, 8007dc8 <setvbuf+0x1c>
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f000 f9d2 	bl	800816c <__sinit>
 8007dc8:	4b58      	ldr	r3, [pc, #352]	; (8007f2c <setvbuf+0x180>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d167      	bne.n	8007e9e <setvbuf+0xf2>
 8007dce:	687c      	ldr	r4, [r7, #4]
 8007dd0:	f1b8 0f02 	cmp.w	r8, #2
 8007dd4:	d006      	beq.n	8007de4 <setvbuf+0x38>
 8007dd6:	f1b8 0f01 	cmp.w	r8, #1
 8007dda:	f200 809f 	bhi.w	8007f1c <setvbuf+0x170>
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	f2c0 809c 	blt.w	8007f1c <setvbuf+0x170>
 8007de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de6:	07db      	lsls	r3, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <setvbuf+0x4a>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	0598      	lsls	r0, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <setvbuf+0x4a>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 fa59 	bl	80082a8 <__retarget_lock_acquire_recursive>
 8007df6:	4621      	mov	r1, r4
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f000 f923 	bl	8008044 <_fflush_r>
 8007dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e00:	b141      	cbz	r1, 8007e14 <setvbuf+0x68>
 8007e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e06:	4299      	cmp	r1, r3
 8007e08:	d002      	beq.n	8007e10 <setvbuf+0x64>
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f7ff ff0c 	bl	8007c28 <_free_r>
 8007e10:	2300      	movs	r3, #0
 8007e12:	6363      	str	r3, [r4, #52]	; 0x34
 8007e14:	2300      	movs	r3, #0
 8007e16:	61a3      	str	r3, [r4, #24]
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	0619      	lsls	r1, r3, #24
 8007e1e:	d503      	bpl.n	8007e28 <setvbuf+0x7c>
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	4638      	mov	r0, r7
 8007e24:	f7ff ff00 	bl	8007c28 <_free_r>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007e2e:	f023 0303 	bic.w	r3, r3, #3
 8007e32:	f1b8 0f02 	cmp.w	r8, #2
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	d06c      	beq.n	8007f14 <setvbuf+0x168>
 8007e3a:	ab01      	add	r3, sp, #4
 8007e3c:	466a      	mov	r2, sp
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4638      	mov	r0, r7
 8007e42:	f000 fa33 	bl	80082ac <__swhatbuf_r>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	4318      	orrs	r0, r3
 8007e4a:	81a0      	strh	r0, [r4, #12]
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	d130      	bne.n	8007eb2 <setvbuf+0x106>
 8007e50:	9d00      	ldr	r5, [sp, #0]
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7ff fed0 	bl	8007bf8 <malloc>
 8007e58:	4606      	mov	r6, r0
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d155      	bne.n	8007f0a <setvbuf+0x15e>
 8007e5e:	f8dd 9000 	ldr.w	r9, [sp]
 8007e62:	45a9      	cmp	r9, r5
 8007e64:	d14a      	bne.n	8007efc <setvbuf+0x150>
 8007e66:	f04f 35ff 	mov.w	r5, #4294967295
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60a2      	str	r2, [r4, #8]
 8007e6e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e72:	6022      	str	r2, [r4, #0]
 8007e74:	6122      	str	r2, [r4, #16]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7c:	6162      	str	r2, [r4, #20]
 8007e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e80:	f043 0302 	orr.w	r3, r3, #2
 8007e84:	07d2      	lsls	r2, r2, #31
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	d405      	bmi.n	8007e96 <setvbuf+0xea>
 8007e8a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e8e:	d102      	bne.n	8007e96 <setvbuf+0xea>
 8007e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e92:	f000 fa0a 	bl	80082aa <__retarget_lock_release_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	b003      	add	sp, #12
 8007e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <setvbuf+0x184>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	d101      	bne.n	8007ea8 <setvbuf+0xfc>
 8007ea4:	68bc      	ldr	r4, [r7, #8]
 8007ea6:	e793      	b.n	8007dd0 <setvbuf+0x24>
 8007ea8:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <setvbuf+0x188>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	bf08      	it	eq
 8007eae:	68fc      	ldreq	r4, [r7, #12]
 8007eb0:	e78e      	b.n	8007dd0 <setvbuf+0x24>
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d0cd      	beq.n	8007e52 <setvbuf+0xa6>
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	b913      	cbnz	r3, 8007ec0 <setvbuf+0x114>
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f000 f956 	bl	800816c <__sinit>
 8007ec0:	f1b8 0f01 	cmp.w	r8, #1
 8007ec4:	bf08      	it	eq
 8007ec6:	89a3      	ldrheq	r3, [r4, #12]
 8007ec8:	6026      	str	r6, [r4, #0]
 8007eca:	bf04      	itt	eq
 8007ecc:	f043 0301 	orreq.w	r3, r3, #1
 8007ed0:	81a3      	strheq	r3, [r4, #12]
 8007ed2:	89a2      	ldrh	r2, [r4, #12]
 8007ed4:	f012 0308 	ands.w	r3, r2, #8
 8007ed8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007edc:	d01c      	beq.n	8007f18 <setvbuf+0x16c>
 8007ede:	07d3      	lsls	r3, r2, #31
 8007ee0:	bf41      	itttt	mi
 8007ee2:	2300      	movmi	r3, #0
 8007ee4:	426d      	negmi	r5, r5
 8007ee6:	60a3      	strmi	r3, [r4, #8]
 8007ee8:	61a5      	strmi	r5, [r4, #24]
 8007eea:	bf58      	it	pl
 8007eec:	60a5      	strpl	r5, [r4, #8]
 8007eee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007ef0:	f015 0501 	ands.w	r5, r5, #1
 8007ef4:	d115      	bne.n	8007f22 <setvbuf+0x176>
 8007ef6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007efa:	e7c8      	b.n	8007e8e <setvbuf+0xe2>
 8007efc:	4648      	mov	r0, r9
 8007efe:	f7ff fe7b 	bl	8007bf8 <malloc>
 8007f02:	4606      	mov	r6, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d0ae      	beq.n	8007e66 <setvbuf+0xba>
 8007f08:	464d      	mov	r5, r9
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	e7d0      	b.n	8007eb6 <setvbuf+0x10a>
 8007f14:	2500      	movs	r5, #0
 8007f16:	e7a8      	b.n	8007e6a <setvbuf+0xbe>
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	e7e8      	b.n	8007eee <setvbuf+0x142>
 8007f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f20:	e7b9      	b.n	8007e96 <setvbuf+0xea>
 8007f22:	2500      	movs	r5, #0
 8007f24:	e7b7      	b.n	8007e96 <setvbuf+0xea>
 8007f26:	bf00      	nop
 8007f28:	20000010 	.word	0x20000010
 8007f2c:	080084b8 	.word	0x080084b8
 8007f30:	080084d8 	.word	0x080084d8
 8007f34:	08008498 	.word	0x08008498

08007f38 <__sflush_r>:
 8007f38:	898a      	ldrh	r2, [r1, #12]
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	4605      	mov	r5, r0
 8007f40:	0710      	lsls	r0, r2, #28
 8007f42:	460c      	mov	r4, r1
 8007f44:	d458      	bmi.n	8007ff8 <__sflush_r+0xc0>
 8007f46:	684b      	ldr	r3, [r1, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc05      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dc02      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d0f9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f64:	682f      	ldr	r7, [r5, #0]
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	d032      	beq.n	8007fd0 <__sflush_r+0x98>
 8007f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	075a      	lsls	r2, r3, #29
 8007f70:	d505      	bpl.n	8007f7e <__sflush_r+0x46>
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	1ac0      	subs	r0, r0, r3
 8007f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f78:	b10b      	cbz	r3, 8007f7e <__sflush_r+0x46>
 8007f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f7c:	1ac0      	subs	r0, r0, r3
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4602      	mov	r2, r0
 8007f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f84:	6a21      	ldr	r1, [r4, #32]
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b0      	blx	r6
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	d106      	bne.n	8007f9e <__sflush_r+0x66>
 8007f90:	6829      	ldr	r1, [r5, #0]
 8007f92:	291d      	cmp	r1, #29
 8007f94:	d82c      	bhi.n	8007ff0 <__sflush_r+0xb8>
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <__sflush_r+0x108>)
 8007f98:	40ca      	lsrs	r2, r1
 8007f9a:	07d6      	lsls	r6, r2, #31
 8007f9c:	d528      	bpl.n	8007ff0 <__sflush_r+0xb8>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6062      	str	r2, [r4, #4]
 8007fa2:	04d9      	lsls	r1, r3, #19
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	d504      	bpl.n	8007fb4 <__sflush_r+0x7c>
 8007faa:	1c42      	adds	r2, r0, #1
 8007fac:	d101      	bne.n	8007fb2 <__sflush_r+0x7a>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	b903      	cbnz	r3, 8007fb4 <__sflush_r+0x7c>
 8007fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8007fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fb6:	602f      	str	r7, [r5, #0]
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d0ca      	beq.n	8007f52 <__sflush_r+0x1a>
 8007fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc0:	4299      	cmp	r1, r3
 8007fc2:	d002      	beq.n	8007fca <__sflush_r+0x92>
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff fe2f 	bl	8007c28 <_free_r>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8007fce:	e7c1      	b.n	8007f54 <__sflush_r+0x1c>
 8007fd0:	6a21      	ldr	r1, [r4, #32]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b0      	blx	r6
 8007fd8:	1c41      	adds	r1, r0, #1
 8007fda:	d1c7      	bne.n	8007f6c <__sflush_r+0x34>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c4      	beq.n	8007f6c <__sflush_r+0x34>
 8007fe2:	2b1d      	cmp	r3, #29
 8007fe4:	d001      	beq.n	8007fea <__sflush_r+0xb2>
 8007fe6:	2b16      	cmp	r3, #22
 8007fe8:	d101      	bne.n	8007fee <__sflush_r+0xb6>
 8007fea:	602f      	str	r7, [r5, #0]
 8007fec:	e7b1      	b.n	8007f52 <__sflush_r+0x1a>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	e7ad      	b.n	8007f54 <__sflush_r+0x1c>
 8007ff8:	690f      	ldr	r7, [r1, #16]
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	d0a9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007ffe:	0793      	lsls	r3, r2, #30
 8008000:	680e      	ldr	r6, [r1, #0]
 8008002:	bf08      	it	eq
 8008004:	694b      	ldreq	r3, [r1, #20]
 8008006:	600f      	str	r7, [r1, #0]
 8008008:	bf18      	it	ne
 800800a:	2300      	movne	r3, #0
 800800c:	eba6 0807 	sub.w	r8, r6, r7
 8008010:	608b      	str	r3, [r1, #8]
 8008012:	f1b8 0f00 	cmp.w	r8, #0
 8008016:	dd9c      	ble.n	8007f52 <__sflush_r+0x1a>
 8008018:	6a21      	ldr	r1, [r4, #32]
 800801a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800801c:	4643      	mov	r3, r8
 800801e:	463a      	mov	r2, r7
 8008020:	4628      	mov	r0, r5
 8008022:	47b0      	blx	r6
 8008024:	2800      	cmp	r0, #0
 8008026:	dc06      	bgt.n	8008036 <__sflush_r+0xfe>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	e78e      	b.n	8007f54 <__sflush_r+0x1c>
 8008036:	4407      	add	r7, r0
 8008038:	eba8 0800 	sub.w	r8, r8, r0
 800803c:	e7e9      	b.n	8008012 <__sflush_r+0xda>
 800803e:	bf00      	nop
 8008040:	20400001 	.word	0x20400001

08008044 <_fflush_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	690b      	ldr	r3, [r1, #16]
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	b913      	cbnz	r3, 8008054 <_fflush_r+0x10>
 800804e:	2500      	movs	r5, #0
 8008050:	4628      	mov	r0, r5
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	b118      	cbz	r0, 800805e <_fflush_r+0x1a>
 8008056:	6983      	ldr	r3, [r0, #24]
 8008058:	b90b      	cbnz	r3, 800805e <_fflush_r+0x1a>
 800805a:	f000 f887 	bl	800816c <__sinit>
 800805e:	4b14      	ldr	r3, [pc, #80]	; (80080b0 <_fflush_r+0x6c>)
 8008060:	429c      	cmp	r4, r3
 8008062:	d11b      	bne.n	800809c <_fflush_r+0x58>
 8008064:	686c      	ldr	r4, [r5, #4]
 8008066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0ef      	beq.n	800804e <_fflush_r+0xa>
 800806e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d404      	bmi.n	800807e <_fflush_r+0x3a>
 8008074:	0599      	lsls	r1, r3, #22
 8008076:	d402      	bmi.n	800807e <_fflush_r+0x3a>
 8008078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807a:	f000 f915 	bl	80082a8 <__retarget_lock_acquire_recursive>
 800807e:	4628      	mov	r0, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7ff ff59 	bl	8007f38 <__sflush_r>
 8008086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008088:	07da      	lsls	r2, r3, #31
 800808a:	4605      	mov	r5, r0
 800808c:	d4e0      	bmi.n	8008050 <_fflush_r+0xc>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d4dd      	bmi.n	8008050 <_fflush_r+0xc>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f000 f908 	bl	80082aa <__retarget_lock_release_recursive>
 800809a:	e7d9      	b.n	8008050 <_fflush_r+0xc>
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <_fflush_r+0x70>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <_fflush_r+0x62>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7df      	b.n	8008066 <_fflush_r+0x22>
 80080a6:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <_fflush_r+0x74>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7da      	b.n	8008066 <_fflush_r+0x22>
 80080b0:	080084b8 	.word	0x080084b8
 80080b4:	080084d8 	.word	0x080084d8
 80080b8:	08008498 	.word	0x08008498

080080bc <std>:
 80080bc:	2300      	movs	r3, #0
 80080be:	b510      	push	{r4, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	e9c0 3300 	strd	r3, r3, [r0]
 80080c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ca:	6083      	str	r3, [r0, #8]
 80080cc:	8181      	strh	r1, [r0, #12]
 80080ce:	6643      	str	r3, [r0, #100]	; 0x64
 80080d0:	81c2      	strh	r2, [r0, #14]
 80080d2:	6183      	str	r3, [r0, #24]
 80080d4:	4619      	mov	r1, r3
 80080d6:	2208      	movs	r2, #8
 80080d8:	305c      	adds	r0, #92	; 0x5c
 80080da:	f7ff fd9d 	bl	8007c18 <memset>
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <std+0x38>)
 80080e0:	6263      	str	r3, [r4, #36]	; 0x24
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <std+0x3c>)
 80080e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080e6:	4b05      	ldr	r3, [pc, #20]	; (80080fc <std+0x40>)
 80080e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ea:	4b05      	ldr	r3, [pc, #20]	; (8008100 <std+0x44>)
 80080ec:	6224      	str	r4, [r4, #32]
 80080ee:	6323      	str	r3, [r4, #48]	; 0x30
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	0800830d 	.word	0x0800830d
 80080f8:	0800832f 	.word	0x0800832f
 80080fc:	08008367 	.word	0x08008367
 8008100:	0800838b 	.word	0x0800838b

08008104 <_cleanup_r>:
 8008104:	4901      	ldr	r1, [pc, #4]	; (800810c <_cleanup_r+0x8>)
 8008106:	f000 b8af 	b.w	8008268 <_fwalk_reent>
 800810a:	bf00      	nop
 800810c:	08008045 	.word	0x08008045

08008110 <__sfmoreglue>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	1e4a      	subs	r2, r1, #1
 8008114:	2568      	movs	r5, #104	; 0x68
 8008116:	4355      	muls	r5, r2
 8008118:	460e      	mov	r6, r1
 800811a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800811e:	f7ff fdd3 	bl	8007cc8 <_malloc_r>
 8008122:	4604      	mov	r4, r0
 8008124:	b140      	cbz	r0, 8008138 <__sfmoreglue+0x28>
 8008126:	2100      	movs	r1, #0
 8008128:	e9c0 1600 	strd	r1, r6, [r0]
 800812c:	300c      	adds	r0, #12
 800812e:	60a0      	str	r0, [r4, #8]
 8008130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008134:	f7ff fd70 	bl	8007c18 <memset>
 8008138:	4620      	mov	r0, r4
 800813a:	bd70      	pop	{r4, r5, r6, pc}

0800813c <__sfp_lock_acquire>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__sfp_lock_acquire+0x8>)
 800813e:	f000 b8b3 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 8008142:	bf00      	nop
 8008144:	20000a7c 	.word	0x20000a7c

08008148 <__sfp_lock_release>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__sfp_lock_release+0x8>)
 800814a:	f000 b8ae 	b.w	80082aa <__retarget_lock_release_recursive>
 800814e:	bf00      	nop
 8008150:	20000a7c 	.word	0x20000a7c

08008154 <__sinit_lock_acquire>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__sinit_lock_acquire+0x8>)
 8008156:	f000 b8a7 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	20000a77 	.word	0x20000a77

08008160 <__sinit_lock_release>:
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <__sinit_lock_release+0x8>)
 8008162:	f000 b8a2 	b.w	80082aa <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	20000a77 	.word	0x20000a77

0800816c <__sinit>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	f7ff fff0 	bl	8008154 <__sinit_lock_acquire>
 8008174:	69a3      	ldr	r3, [r4, #24]
 8008176:	b11b      	cbz	r3, 8008180 <__sinit+0x14>
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817c:	f7ff bff0 	b.w	8008160 <__sinit_lock_release>
 8008180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008184:	6523      	str	r3, [r4, #80]	; 0x50
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <__sinit+0x68>)
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <__sinit+0x6c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	62a2      	str	r2, [r4, #40]	; 0x28
 800818e:	42a3      	cmp	r3, r4
 8008190:	bf04      	itt	eq
 8008192:	2301      	moveq	r3, #1
 8008194:	61a3      	streq	r3, [r4, #24]
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f820 	bl	80081dc <__sfp>
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f81c 	bl	80081dc <__sfp>
 80081a4:	60a0      	str	r0, [r4, #8]
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f818 	bl	80081dc <__sfp>
 80081ac:	2200      	movs	r2, #0
 80081ae:	60e0      	str	r0, [r4, #12]
 80081b0:	2104      	movs	r1, #4
 80081b2:	6860      	ldr	r0, [r4, #4]
 80081b4:	f7ff ff82 	bl	80080bc <std>
 80081b8:	68a0      	ldr	r0, [r4, #8]
 80081ba:	2201      	movs	r2, #1
 80081bc:	2109      	movs	r1, #9
 80081be:	f7ff ff7d 	bl	80080bc <std>
 80081c2:	68e0      	ldr	r0, [r4, #12]
 80081c4:	2202      	movs	r2, #2
 80081c6:	2112      	movs	r1, #18
 80081c8:	f7ff ff78 	bl	80080bc <std>
 80081cc:	2301      	movs	r3, #1
 80081ce:	61a3      	str	r3, [r4, #24]
 80081d0:	e7d2      	b.n	8008178 <__sinit+0xc>
 80081d2:	bf00      	nop
 80081d4:	08008494 	.word	0x08008494
 80081d8:	08008105 	.word	0x08008105

080081dc <__sfp>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	4607      	mov	r7, r0
 80081e0:	f7ff ffac 	bl	800813c <__sfp_lock_acquire>
 80081e4:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <__sfp+0x84>)
 80081e6:	681e      	ldr	r6, [r3, #0]
 80081e8:	69b3      	ldr	r3, [r6, #24]
 80081ea:	b913      	cbnz	r3, 80081f2 <__sfp+0x16>
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff ffbd 	bl	800816c <__sinit>
 80081f2:	3648      	adds	r6, #72	; 0x48
 80081f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	d503      	bpl.n	8008204 <__sfp+0x28>
 80081fc:	6833      	ldr	r3, [r6, #0]
 80081fe:	b30b      	cbz	r3, 8008244 <__sfp+0x68>
 8008200:	6836      	ldr	r6, [r6, #0]
 8008202:	e7f7      	b.n	80081f4 <__sfp+0x18>
 8008204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008208:	b9d5      	cbnz	r5, 8008240 <__sfp+0x64>
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <__sfp+0x88>)
 800820c:	60e3      	str	r3, [r4, #12]
 800820e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008212:	6665      	str	r5, [r4, #100]	; 0x64
 8008214:	f000 f847 	bl	80082a6 <__retarget_lock_init_recursive>
 8008218:	f7ff ff96 	bl	8008148 <__sfp_lock_release>
 800821c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	61a5      	str	r5, [r4, #24]
 8008228:	2208      	movs	r2, #8
 800822a:	4629      	mov	r1, r5
 800822c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008230:	f7ff fcf2 	bl	8007c18 <memset>
 8008234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800823c:	4620      	mov	r0, r4
 800823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008240:	3468      	adds	r4, #104	; 0x68
 8008242:	e7d9      	b.n	80081f8 <__sfp+0x1c>
 8008244:	2104      	movs	r1, #4
 8008246:	4638      	mov	r0, r7
 8008248:	f7ff ff62 	bl	8008110 <__sfmoreglue>
 800824c:	4604      	mov	r4, r0
 800824e:	6030      	str	r0, [r6, #0]
 8008250:	2800      	cmp	r0, #0
 8008252:	d1d5      	bne.n	8008200 <__sfp+0x24>
 8008254:	f7ff ff78 	bl	8008148 <__sfp_lock_release>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	e7ee      	b.n	800823c <__sfp+0x60>
 800825e:	bf00      	nop
 8008260:	08008494 	.word	0x08008494
 8008264:	ffff0001 	.word	0xffff0001

08008268 <_fwalk_reent>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4606      	mov	r6, r0
 800826e:	4688      	mov	r8, r1
 8008270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008274:	2700      	movs	r7, #0
 8008276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800827a:	f1b9 0901 	subs.w	r9, r9, #1
 800827e:	d505      	bpl.n	800828c <_fwalk_reent+0x24>
 8008280:	6824      	ldr	r4, [r4, #0]
 8008282:	2c00      	cmp	r4, #0
 8008284:	d1f7      	bne.n	8008276 <_fwalk_reent+0xe>
 8008286:	4638      	mov	r0, r7
 8008288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828c:	89ab      	ldrh	r3, [r5, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d907      	bls.n	80082a2 <_fwalk_reent+0x3a>
 8008292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008296:	3301      	adds	r3, #1
 8008298:	d003      	beq.n	80082a2 <_fwalk_reent+0x3a>
 800829a:	4629      	mov	r1, r5
 800829c:	4630      	mov	r0, r6
 800829e:	47c0      	blx	r8
 80082a0:	4307      	orrs	r7, r0
 80082a2:	3568      	adds	r5, #104	; 0x68
 80082a4:	e7e9      	b.n	800827a <_fwalk_reent+0x12>

080082a6 <__retarget_lock_init_recursive>:
 80082a6:	4770      	bx	lr

080082a8 <__retarget_lock_acquire_recursive>:
 80082a8:	4770      	bx	lr

080082aa <__retarget_lock_release_recursive>:
 80082aa:	4770      	bx	lr

080082ac <__swhatbuf_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	460e      	mov	r6, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	b096      	sub	sp, #88	; 0x58
 80082b8:	4614      	mov	r4, r2
 80082ba:	461d      	mov	r5, r3
 80082bc:	da07      	bge.n	80082ce <__swhatbuf_r+0x22>
 80082be:	2300      	movs	r3, #0
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	89b3      	ldrh	r3, [r6, #12]
 80082c4:	061a      	lsls	r2, r3, #24
 80082c6:	d410      	bmi.n	80082ea <__swhatbuf_r+0x3e>
 80082c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082cc:	e00e      	b.n	80082ec <__swhatbuf_r+0x40>
 80082ce:	466a      	mov	r2, sp
 80082d0:	f000 f882 	bl	80083d8 <_fstat_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dbf2      	blt.n	80082be <__swhatbuf_r+0x12>
 80082d8:	9a01      	ldr	r2, [sp, #4]
 80082da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082e2:	425a      	negs	r2, r3
 80082e4:	415a      	adcs	r2, r3
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	e7ee      	b.n	80082c8 <__swhatbuf_r+0x1c>
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	2000      	movs	r0, #0
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	b016      	add	sp, #88	; 0x58
 80082f2:	bd70      	pop	{r4, r5, r6, pc}

080082f4 <__malloc_lock>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__malloc_lock+0x8>)
 80082f6:	f7ff bfd7 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 80082fa:	bf00      	nop
 80082fc:	20000a78 	.word	0x20000a78

08008300 <__malloc_unlock>:
 8008300:	4801      	ldr	r0, [pc, #4]	; (8008308 <__malloc_unlock+0x8>)
 8008302:	f7ff bfd2 	b.w	80082aa <__retarget_lock_release_recursive>
 8008306:	bf00      	nop
 8008308:	20000a78 	.word	0x20000a78

0800830c <__sread>:
 800830c:	b510      	push	{r4, lr}
 800830e:	460c      	mov	r4, r1
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	f000 f884 	bl	8008420 <_read_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	bfab      	itete	ge
 800831c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800831e:	89a3      	ldrhlt	r3, [r4, #12]
 8008320:	181b      	addge	r3, r3, r0
 8008322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008326:	bfac      	ite	ge
 8008328:	6563      	strge	r3, [r4, #84]	; 0x54
 800832a:	81a3      	strhlt	r3, [r4, #12]
 800832c:	bd10      	pop	{r4, pc}

0800832e <__swrite>:
 800832e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	461f      	mov	r7, r3
 8008334:	898b      	ldrh	r3, [r1, #12]
 8008336:	05db      	lsls	r3, r3, #23
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4616      	mov	r6, r2
 800833e:	d505      	bpl.n	800834c <__swrite+0x1e>
 8008340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008344:	2302      	movs	r3, #2
 8008346:	2200      	movs	r2, #0
 8008348:	f000 f858 	bl	80083fc <_lseek_r>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	4632      	mov	r2, r6
 800835a:	463b      	mov	r3, r7
 800835c:	4628      	mov	r0, r5
 800835e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008362:	f000 b817 	b.w	8008394 <_write_r>

08008366 <__sseek>:
 8008366:	b510      	push	{r4, lr}
 8008368:	460c      	mov	r4, r1
 800836a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836e:	f000 f845 	bl	80083fc <_lseek_r>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	bf15      	itete	ne
 8008378:	6560      	strne	r0, [r4, #84]	; 0x54
 800837a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800837e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008382:	81a3      	strheq	r3, [r4, #12]
 8008384:	bf18      	it	ne
 8008386:	81a3      	strhne	r3, [r4, #12]
 8008388:	bd10      	pop	{r4, pc}

0800838a <__sclose>:
 800838a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838e:	f000 b813 	b.w	80083b8 <_close_r>
	...

08008394 <_write_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_write_r+0x20>)
 8008398:	4604      	mov	r4, r0
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7f9 fa05 	bl	80017b2 <_write>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_write_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_write_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000a80 	.word	0x20000a80

080083b8 <_close_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_close_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f9 fa11 	bl	80017ea <_close>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_close_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_close_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20000a80 	.word	0x20000a80

080083d8 <_fstat_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d07      	ldr	r5, [pc, #28]	; (80083f8 <_fstat_r+0x20>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f7f9 fa0c 	bl	8001802 <_fstat>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d102      	bne.n	80083f4 <_fstat_r+0x1c>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b103      	cbz	r3, 80083f4 <_fstat_r+0x1c>
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	20000a80 	.word	0x20000a80

080083fc <_lseek_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	; (800841c <_lseek_r+0x20>)
 8008400:	4604      	mov	r4, r0
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	f7f9 fa09 	bl	8001822 <_lseek>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_lseek_r+0x1e>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_lseek_r+0x1e>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20000a80 	.word	0x20000a80

08008420 <_read_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_read_r+0x20>)
 8008424:	4604      	mov	r4, r0
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	2200      	movs	r2, #0
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	f7f9 f9a2 	bl	8001778 <_read>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_read_r+0x1e>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_read_r+0x1e>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	20000a80 	.word	0x20000a80

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
